
ghostdetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08004e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004e1c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee3c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3f  00000000  00000000  0002eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b18  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014836  00000000  00000000  00032728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d1b  00000000  00000000  00046f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082146  00000000  00000000  00057c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000354c  00000000  00000000  000d9dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000dd30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cfc 	.word	0x08004cfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004cfc 	.word	0x08004cfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_f2uiz>:
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	b510      	push	{r4, lr}
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	1c04      	adds	r4, r0, #0
 80002c4:	f000 fed6 	bl	8001074 <__aeabi_fcmpge>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d103      	bne.n	80002d4 <__aeabi_f2uiz+0x18>
 80002cc:	1c20      	adds	r0, r4, #0
 80002ce:	f000 fe81 	bl	8000fd4 <__aeabi_f2iz>
 80002d2:	bd10      	pop	{r4, pc}
 80002d4:	219e      	movs	r1, #158	; 0x9e
 80002d6:	1c20      	adds	r0, r4, #0
 80002d8:	05c9      	lsls	r1, r1, #23
 80002da:	f000 fcdb 	bl	8000c94 <__aeabi_fsub>
 80002de:	f000 fe79 	bl	8000fd4 <__aeabi_f2iz>
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	469c      	mov	ip, r3
 80002e8:	4460      	add	r0, ip
 80002ea:	e7f2      	b.n	80002d2 <__aeabi_f2uiz+0x16>

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f000 feda 	bl	80010c4 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f000 fed5 	bl	80010c4 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	d434      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000322:	469b      	mov	fp, r3
 8000324:	4653      	mov	r3, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83b      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e079      	b.n	8000432 <__udivmoddi4+0x146>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e076      	b.n	8000438 <__udivmoddi4+0x14c>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e029      	b.n	80003b8 <__udivmoddi4+0xcc>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	469b      	mov	fp, r3
 8000390:	2320      	movs	r3, #32
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	4652      	mov	r2, sl
 8000396:	40da      	lsrs	r2, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0013      	movs	r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	408a      	lsls	r2, r1
 80003a0:	0017      	movs	r7, r2
 80003a2:	4642      	mov	r2, r8
 80003a4:	431f      	orrs	r7, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	001e      	movs	r6, r3
 80003ac:	42af      	cmp	r7, r5
 80003ae:	d9c3      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003b0:	2200      	movs	r2, #0
 80003b2:	2300      	movs	r3, #0
 80003b4:	9200      	str	r2, [sp, #0]
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	4643      	mov	r3, r8
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0d8      	beq.n	8000370 <__udivmoddi4+0x84>
 80003be:	07fb      	lsls	r3, r7, #31
 80003c0:	0872      	lsrs	r2, r6, #1
 80003c2:	431a      	orrs	r2, r3
 80003c4:	4646      	mov	r6, r8
 80003c6:	087b      	lsrs	r3, r7, #1
 80003c8:	e00e      	b.n	80003e8 <__udivmoddi4+0xfc>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d101      	bne.n	80003d2 <__udivmoddi4+0xe6>
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d80c      	bhi.n	80003ec <__udivmoddi4+0x100>
 80003d2:	1aa4      	subs	r4, r4, r2
 80003d4:	419d      	sbcs	r5, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	1924      	adds	r4, r4, r4
 80003da:	416d      	adcs	r5, r5
 80003dc:	2100      	movs	r1, #0
 80003de:	3e01      	subs	r6, #1
 80003e0:	1824      	adds	r4, r4, r0
 80003e2:	414d      	adcs	r5, r1
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d006      	beq.n	80003f6 <__udivmoddi4+0x10a>
 80003e8:	42ab      	cmp	r3, r5
 80003ea:	d9ee      	bls.n	80003ca <__udivmoddi4+0xde>
 80003ec:	3e01      	subs	r6, #1
 80003ee:	1924      	adds	r4, r4, r4
 80003f0:	416d      	adcs	r5, r5
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d1f8      	bne.n	80003e8 <__udivmoddi4+0xfc>
 80003f6:	9800      	ldr	r0, [sp, #0]
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	465b      	mov	r3, fp
 80003fc:	1900      	adds	r0, r0, r4
 80003fe:	4169      	adcs	r1, r5
 8000400:	2b00      	cmp	r3, #0
 8000402:	db24      	blt.n	800044e <__udivmoddi4+0x162>
 8000404:	002b      	movs	r3, r5
 8000406:	465a      	mov	r2, fp
 8000408:	4644      	mov	r4, r8
 800040a:	40d3      	lsrs	r3, r2
 800040c:	002a      	movs	r2, r5
 800040e:	40e2      	lsrs	r2, r4
 8000410:	001c      	movs	r4, r3
 8000412:	465b      	mov	r3, fp
 8000414:	0015      	movs	r5, r2
 8000416:	2b00      	cmp	r3, #0
 8000418:	db2a      	blt.n	8000470 <__udivmoddi4+0x184>
 800041a:	0026      	movs	r6, r4
 800041c:	409e      	lsls	r6, r3
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4647      	mov	r7, r8
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e79e      	b.n	8000370 <__udivmoddi4+0x84>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d8bc      	bhi.n	80003b0 <__udivmoddi4+0xc4>
 8000436:	e782      	b.n	800033e <__udivmoddi4+0x52>
 8000438:	4642      	mov	r2, r8
 800043a:	2320      	movs	r3, #32
 800043c:	2100      	movs	r1, #0
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	9201      	str	r2, [sp, #4]
 8000446:	2201      	movs	r2, #1
 8000448:	40da      	lsrs	r2, r3
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	e785      	b.n	800035a <__udivmoddi4+0x6e>
 800044e:	4642      	mov	r2, r8
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4646      	mov	r6, r8
 8000458:	409a      	lsls	r2, r3
 800045a:	0023      	movs	r3, r4
 800045c:	40f3      	lsrs	r3, r6
 800045e:	4644      	mov	r4, r8
 8000460:	4313      	orrs	r3, r2
 8000462:	002a      	movs	r2, r5
 8000464:	40e2      	lsrs	r2, r4
 8000466:	001c      	movs	r4, r3
 8000468:	465b      	mov	r3, fp
 800046a:	0015      	movs	r5, r2
 800046c:	2b00      	cmp	r3, #0
 800046e:	dad4      	bge.n	800041a <__udivmoddi4+0x12e>
 8000470:	4642      	mov	r2, r8
 8000472:	002f      	movs	r7, r5
 8000474:	2320      	movs	r3, #32
 8000476:	0026      	movs	r6, r4
 8000478:	4097      	lsls	r7, r2
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	003b      	movs	r3, r7
 8000480:	4333      	orrs	r3, r6
 8000482:	e7cd      	b.n	8000420 <__udivmoddi4+0x134>

08000484 <__aeabi_fadd>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	4647      	mov	r7, r8
 8000488:	46ce      	mov	lr, r9
 800048a:	024a      	lsls	r2, r1, #9
 800048c:	0243      	lsls	r3, r0, #9
 800048e:	0045      	lsls	r5, r0, #1
 8000490:	0fc4      	lsrs	r4, r0, #31
 8000492:	0a50      	lsrs	r0, r2, #9
 8000494:	4680      	mov	r8, r0
 8000496:	0048      	lsls	r0, r1, #1
 8000498:	0a5b      	lsrs	r3, r3, #9
 800049a:	0e00      	lsrs	r0, r0, #24
 800049c:	0992      	lsrs	r2, r2, #6
 800049e:	4694      	mov	ip, r2
 80004a0:	b580      	push	{r7, lr}
 80004a2:	001e      	movs	r6, r3
 80004a4:	4681      	mov	r9, r0
 80004a6:	0002      	movs	r2, r0
 80004a8:	0e2d      	lsrs	r5, r5, #24
 80004aa:	00df      	lsls	r7, r3, #3
 80004ac:	0fc9      	lsrs	r1, r1, #31
 80004ae:	428c      	cmp	r4, r1
 80004b0:	d024      	beq.n	80004fc <__aeabi_fadd+0x78>
 80004b2:	1a28      	subs	r0, r5, r0
 80004b4:	2800      	cmp	r0, #0
 80004b6:	dd0e      	ble.n	80004d6 <__aeabi_fadd+0x52>
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d13e      	bne.n	800053a <__aeabi_fadd+0xb6>
 80004bc:	4662      	mov	r2, ip
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0x40>
 80004c2:	e0fd      	b.n	80006c0 <__aeabi_fadd+0x23c>
 80004c4:	1e42      	subs	r2, r0, #1
 80004c6:	2801      	cmp	r0, #1
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x48>
 80004ca:	e137      	b.n	800073c <__aeabi_fadd+0x2b8>
 80004cc:	28ff      	cmp	r0, #255	; 0xff
 80004ce:	d100      	bne.n	80004d2 <__aeabi_fadd+0x4e>
 80004d0:	e0a9      	b.n	8000626 <__aeabi_fadd+0x1a2>
 80004d2:	0010      	movs	r0, r2
 80004d4:	e039      	b.n	800054a <__aeabi_fadd+0xc6>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d063      	beq.n	80005a2 <__aeabi_fadd+0x11e>
 80004da:	464b      	mov	r3, r9
 80004dc:	1b52      	subs	r2, r2, r5
 80004de:	2d00      	cmp	r5, #0
 80004e0:	d000      	beq.n	80004e4 <__aeabi_fadd+0x60>
 80004e2:	e0e0      	b.n	80006a6 <__aeabi_fadd+0x222>
 80004e4:	2f00      	cmp	r7, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x66>
 80004e8:	e0ce      	b.n	8000688 <__aeabi_fadd+0x204>
 80004ea:	1e53      	subs	r3, r2, #1
 80004ec:	2a01      	cmp	r2, #1
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x6e>
 80004f0:	e155      	b.n	800079e <__aeabi_fadd+0x31a>
 80004f2:	2aff      	cmp	r2, #255	; 0xff
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x74>
 80004f6:	e094      	b.n	8000622 <__aeabi_fadd+0x19e>
 80004f8:	001a      	movs	r2, r3
 80004fa:	e0d9      	b.n	80006b0 <__aeabi_fadd+0x22c>
 80004fc:	1a2a      	subs	r2, r5, r0
 80004fe:	2a00      	cmp	r2, #0
 8000500:	dc00      	bgt.n	8000504 <__aeabi_fadd+0x80>
 8000502:	e099      	b.n	8000638 <__aeabi_fadd+0x1b4>
 8000504:	2800      	cmp	r0, #0
 8000506:	d062      	beq.n	80005ce <__aeabi_fadd+0x14a>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x8a>
 800050c:	e08b      	b.n	8000626 <__aeabi_fadd+0x1a2>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	4661      	mov	r1, ip
 8000512:	04db      	lsls	r3, r3, #19
 8000514:	4319      	orrs	r1, r3
 8000516:	468c      	mov	ip, r1
 8000518:	2a1b      	cmp	r2, #27
 800051a:	dc00      	bgt.n	800051e <__aeabi_fadd+0x9a>
 800051c:	e0d2      	b.n	80006c4 <__aeabi_fadd+0x240>
 800051e:	2301      	movs	r3, #1
 8000520:	19db      	adds	r3, r3, r7
 8000522:	015a      	lsls	r2, r3, #5
 8000524:	d56a      	bpl.n	80005fc <__aeabi_fadd+0x178>
 8000526:	3501      	adds	r5, #1
 8000528:	2dff      	cmp	r5, #255	; 0xff
 800052a:	d05b      	beq.n	80005e4 <__aeabi_fadd+0x160>
 800052c:	2201      	movs	r2, #1
 800052e:	49a3      	ldr	r1, [pc, #652]	; (80007bc <__aeabi_fadd+0x338>)
 8000530:	401a      	ands	r2, r3
 8000532:	085b      	lsrs	r3, r3, #1
 8000534:	400b      	ands	r3, r1
 8000536:	4313      	orrs	r3, r2
 8000538:	e01c      	b.n	8000574 <__aeabi_fadd+0xf0>
 800053a:	2dff      	cmp	r5, #255	; 0xff
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0xbc>
 800053e:	e072      	b.n	8000626 <__aeabi_fadd+0x1a2>
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	4662      	mov	r2, ip
 8000544:	04db      	lsls	r3, r3, #19
 8000546:	431a      	orrs	r2, r3
 8000548:	4694      	mov	ip, r2
 800054a:	281b      	cmp	r0, #27
 800054c:	dc00      	bgt.n	8000550 <__aeabi_fadd+0xcc>
 800054e:	e090      	b.n	8000672 <__aeabi_fadd+0x1ee>
 8000550:	2301      	movs	r3, #1
 8000552:	1afb      	subs	r3, r7, r3
 8000554:	015a      	lsls	r2, r3, #5
 8000556:	d551      	bpl.n	80005fc <__aeabi_fadd+0x178>
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	099e      	lsrs	r6, r3, #6
 800055c:	0030      	movs	r0, r6
 800055e:	f000 fd93 	bl	8001088 <__clzsi2>
 8000562:	0033      	movs	r3, r6
 8000564:	3805      	subs	r0, #5
 8000566:	4083      	lsls	r3, r0
 8000568:	4285      	cmp	r5, r0
 800056a:	dc00      	bgt.n	800056e <__aeabi_fadd+0xea>
 800056c:	e075      	b.n	800065a <__aeabi_fadd+0x1d6>
 800056e:	4a94      	ldr	r2, [pc, #592]	; (80007c0 <__aeabi_fadd+0x33c>)
 8000570:	1a2d      	subs	r5, r5, r0
 8000572:	4013      	ands	r3, r2
 8000574:	075a      	lsls	r2, r3, #29
 8000576:	d004      	beq.n	8000582 <__aeabi_fadd+0xfe>
 8000578:	220f      	movs	r2, #15
 800057a:	401a      	ands	r2, r3
 800057c:	2a04      	cmp	r2, #4
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0xfe>
 8000580:	3304      	adds	r3, #4
 8000582:	015a      	lsls	r2, r3, #5
 8000584:	d53c      	bpl.n	8000600 <__aeabi_fadd+0x17c>
 8000586:	1c68      	adds	r0, r5, #1
 8000588:	2dfe      	cmp	r5, #254	; 0xfe
 800058a:	d02b      	beq.n	80005e4 <__aeabi_fadd+0x160>
 800058c:	019b      	lsls	r3, r3, #6
 800058e:	0a5e      	lsrs	r6, r3, #9
 8000590:	b2c0      	uxtb	r0, r0
 8000592:	05c0      	lsls	r0, r0, #23
 8000594:	4330      	orrs	r0, r6
 8000596:	07e4      	lsls	r4, r4, #31
 8000598:	4320      	orrs	r0, r4
 800059a:	bcc0      	pop	{r6, r7}
 800059c:	46b9      	mov	r9, r7
 800059e:	46b0      	mov	r8, r6
 80005a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a2:	20fe      	movs	r0, #254	; 0xfe
 80005a4:	1c6a      	adds	r2, r5, #1
 80005a6:	4210      	tst	r0, r2
 80005a8:	d172      	bne.n	8000690 <__aeabi_fadd+0x20c>
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0x12c>
 80005ae:	e0ae      	b.n	800070e <__aeabi_fadd+0x28a>
 80005b0:	2f00      	cmp	r7, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x132>
 80005b4:	e0ec      	b.n	8000790 <__aeabi_fadd+0x30c>
 80005b6:	4663      	mov	r3, ip
 80005b8:	2000      	movs	r0, #0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0e9      	beq.n	8000592 <__aeabi_fadd+0x10e>
 80005be:	1afb      	subs	r3, r7, r3
 80005c0:	015a      	lsls	r2, r3, #5
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_fadd+0x142>
 80005c4:	e0f3      	b.n	80007ae <__aeabi_fadd+0x32a>
 80005c6:	4663      	mov	r3, ip
 80005c8:	000c      	movs	r4, r1
 80005ca:	1bdb      	subs	r3, r3, r7
 80005cc:	e7d2      	b.n	8000574 <__aeabi_fadd+0xf0>
 80005ce:	4661      	mov	r1, ip
 80005d0:	2900      	cmp	r1, #0
 80005d2:	d05b      	beq.n	800068c <__aeabi_fadd+0x208>
 80005d4:	1e51      	subs	r1, r2, #1
 80005d6:	2a01      	cmp	r2, #1
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x158>
 80005da:	e0a7      	b.n	800072c <__aeabi_fadd+0x2a8>
 80005dc:	2aff      	cmp	r2, #255	; 0xff
 80005de:	d022      	beq.n	8000626 <__aeabi_fadd+0x1a2>
 80005e0:	000a      	movs	r2, r1
 80005e2:	e799      	b.n	8000518 <__aeabi_fadd+0x94>
 80005e4:	20ff      	movs	r0, #255	; 0xff
 80005e6:	2600      	movs	r6, #0
 80005e8:	e7d3      	b.n	8000592 <__aeabi_fadd+0x10e>
 80005ea:	21fe      	movs	r1, #254	; 0xfe
 80005ec:	1c6a      	adds	r2, r5, #1
 80005ee:	4211      	tst	r1, r2
 80005f0:	d073      	beq.n	80006da <__aeabi_fadd+0x256>
 80005f2:	2aff      	cmp	r2, #255	; 0xff
 80005f4:	d0f6      	beq.n	80005e4 <__aeabi_fadd+0x160>
 80005f6:	0015      	movs	r5, r2
 80005f8:	4467      	add	r7, ip
 80005fa:	087b      	lsrs	r3, r7, #1
 80005fc:	075a      	lsls	r2, r3, #29
 80005fe:	d1bb      	bne.n	8000578 <__aeabi_fadd+0xf4>
 8000600:	08db      	lsrs	r3, r3, #3
 8000602:	2dff      	cmp	r5, #255	; 0xff
 8000604:	d00f      	beq.n	8000626 <__aeabi_fadd+0x1a2>
 8000606:	025b      	lsls	r3, r3, #9
 8000608:	0a5e      	lsrs	r6, r3, #9
 800060a:	b2e8      	uxtb	r0, r5
 800060c:	e7c1      	b.n	8000592 <__aeabi_fadd+0x10e>
 800060e:	4662      	mov	r2, ip
 8000610:	2a00      	cmp	r2, #0
 8000612:	d008      	beq.n	8000626 <__aeabi_fadd+0x1a2>
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	03d2      	lsls	r2, r2, #15
 8000618:	4213      	tst	r3, r2
 800061a:	d004      	beq.n	8000626 <__aeabi_fadd+0x1a2>
 800061c:	4640      	mov	r0, r8
 800061e:	4210      	tst	r0, r2
 8000620:	d101      	bne.n	8000626 <__aeabi_fadd+0x1a2>
 8000622:	000c      	movs	r4, r1
 8000624:	4643      	mov	r3, r8
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0dc      	beq.n	80005e4 <__aeabi_fadd+0x160>
 800062a:	2680      	movs	r6, #128	; 0x80
 800062c:	03f6      	lsls	r6, r6, #15
 800062e:	431e      	orrs	r6, r3
 8000630:	0276      	lsls	r6, r6, #9
 8000632:	20ff      	movs	r0, #255	; 0xff
 8000634:	0a76      	lsrs	r6, r6, #9
 8000636:	e7ac      	b.n	8000592 <__aeabi_fadd+0x10e>
 8000638:	2a00      	cmp	r2, #0
 800063a:	d0d6      	beq.n	80005ea <__aeabi_fadd+0x166>
 800063c:	1b42      	subs	r2, r0, r5
 800063e:	2d00      	cmp	r5, #0
 8000640:	d05c      	beq.n	80006fc <__aeabi_fadd+0x278>
 8000642:	28ff      	cmp	r0, #255	; 0xff
 8000644:	d0ee      	beq.n	8000624 <__aeabi_fadd+0x1a0>
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	04db      	lsls	r3, r3, #19
 800064a:	431f      	orrs	r7, r3
 800064c:	2a1b      	cmp	r2, #27
 800064e:	dc00      	bgt.n	8000652 <__aeabi_fadd+0x1ce>
 8000650:	e082      	b.n	8000758 <__aeabi_fadd+0x2d4>
 8000652:	2301      	movs	r3, #1
 8000654:	464d      	mov	r5, r9
 8000656:	4463      	add	r3, ip
 8000658:	e763      	b.n	8000522 <__aeabi_fadd+0x9e>
 800065a:	2220      	movs	r2, #32
 800065c:	1b40      	subs	r0, r0, r5
 800065e:	3001      	adds	r0, #1
 8000660:	1a12      	subs	r2, r2, r0
 8000662:	0019      	movs	r1, r3
 8000664:	4093      	lsls	r3, r2
 8000666:	40c1      	lsrs	r1, r0
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	4193      	sbcs	r3, r2
 800066c:	2500      	movs	r5, #0
 800066e:	430b      	orrs	r3, r1
 8000670:	e780      	b.n	8000574 <__aeabi_fadd+0xf0>
 8000672:	2320      	movs	r3, #32
 8000674:	4661      	mov	r1, ip
 8000676:	1a1b      	subs	r3, r3, r0
 8000678:	4099      	lsls	r1, r3
 800067a:	4662      	mov	r2, ip
 800067c:	000b      	movs	r3, r1
 800067e:	40c2      	lsrs	r2, r0
 8000680:	1e59      	subs	r1, r3, #1
 8000682:	418b      	sbcs	r3, r1
 8000684:	4313      	orrs	r3, r2
 8000686:	e764      	b.n	8000552 <__aeabi_fadd+0xce>
 8000688:	000c      	movs	r4, r1
 800068a:	4643      	mov	r3, r8
 800068c:	0015      	movs	r5, r2
 800068e:	e7b8      	b.n	8000602 <__aeabi_fadd+0x17e>
 8000690:	4663      	mov	r3, ip
 8000692:	1afe      	subs	r6, r7, r3
 8000694:	0173      	lsls	r3, r6, #5
 8000696:	d445      	bmi.n	8000724 <__aeabi_fadd+0x2a0>
 8000698:	2e00      	cmp	r6, #0
 800069a:	d000      	beq.n	800069e <__aeabi_fadd+0x21a>
 800069c:	e75e      	b.n	800055c <__aeabi_fadd+0xd8>
 800069e:	2400      	movs	r4, #0
 80006a0:	2000      	movs	r0, #0
 80006a2:	2600      	movs	r6, #0
 80006a4:	e775      	b.n	8000592 <__aeabi_fadd+0x10e>
 80006a6:	2bff      	cmp	r3, #255	; 0xff
 80006a8:	d0bb      	beq.n	8000622 <__aeabi_fadd+0x19e>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	04db      	lsls	r3, r3, #19
 80006ae:	431f      	orrs	r7, r3
 80006b0:	2a1b      	cmp	r2, #27
 80006b2:	dd47      	ble.n	8000744 <__aeabi_fadd+0x2c0>
 80006b4:	2301      	movs	r3, #1
 80006b6:	4662      	mov	r2, ip
 80006b8:	000c      	movs	r4, r1
 80006ba:	464d      	mov	r5, r9
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	e749      	b.n	8000554 <__aeabi_fadd+0xd0>
 80006c0:	0005      	movs	r5, r0
 80006c2:	e79e      	b.n	8000602 <__aeabi_fadd+0x17e>
 80006c4:	4661      	mov	r1, ip
 80006c6:	2320      	movs	r3, #32
 80006c8:	40d1      	lsrs	r1, r2
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4662      	mov	r2, ip
 80006ce:	409a      	lsls	r2, r3
 80006d0:	0013      	movs	r3, r2
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
 80006d6:	430b      	orrs	r3, r1
 80006d8:	e722      	b.n	8000520 <__aeabi_fadd+0x9c>
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d146      	bne.n	800076c <__aeabi_fadd+0x2e8>
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d062      	beq.n	80007a8 <__aeabi_fadd+0x324>
 80006e2:	4663      	mov	r3, ip
 80006e4:	2000      	movs	r0, #0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x268>
 80006ea:	e752      	b.n	8000592 <__aeabi_fadd+0x10e>
 80006ec:	003b      	movs	r3, r7
 80006ee:	4463      	add	r3, ip
 80006f0:	015a      	lsls	r2, r3, #5
 80006f2:	d583      	bpl.n	80005fc <__aeabi_fadd+0x178>
 80006f4:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <__aeabi_fadd+0x33c>)
 80006f6:	3501      	adds	r5, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	e77f      	b.n	80005fc <__aeabi_fadd+0x178>
 80006fc:	2f00      	cmp	r7, #0
 80006fe:	d0c4      	beq.n	800068a <__aeabi_fadd+0x206>
 8000700:	1e53      	subs	r3, r2, #1
 8000702:	2a01      	cmp	r2, #1
 8000704:	d012      	beq.n	800072c <__aeabi_fadd+0x2a8>
 8000706:	2aff      	cmp	r2, #255	; 0xff
 8000708:	d08c      	beq.n	8000624 <__aeabi_fadd+0x1a0>
 800070a:	001a      	movs	r2, r3
 800070c:	e79e      	b.n	800064c <__aeabi_fadd+0x1c8>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x290>
 8000712:	e77c      	b.n	800060e <__aeabi_fadd+0x18a>
 8000714:	4663      	mov	r3, ip
 8000716:	2b00      	cmp	r3, #0
 8000718:	d183      	bne.n	8000622 <__aeabi_fadd+0x19e>
 800071a:	2680      	movs	r6, #128	; 0x80
 800071c:	2400      	movs	r4, #0
 800071e:	20ff      	movs	r0, #255	; 0xff
 8000720:	03f6      	lsls	r6, r6, #15
 8000722:	e736      	b.n	8000592 <__aeabi_fadd+0x10e>
 8000724:	4663      	mov	r3, ip
 8000726:	000c      	movs	r4, r1
 8000728:	1bde      	subs	r6, r3, r7
 800072a:	e717      	b.n	800055c <__aeabi_fadd+0xd8>
 800072c:	003b      	movs	r3, r7
 800072e:	4463      	add	r3, ip
 8000730:	2501      	movs	r5, #1
 8000732:	015a      	lsls	r2, r3, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x2b4>
 8000736:	e761      	b.n	80005fc <__aeabi_fadd+0x178>
 8000738:	2502      	movs	r5, #2
 800073a:	e6f7      	b.n	800052c <__aeabi_fadd+0xa8>
 800073c:	4663      	mov	r3, ip
 800073e:	2501      	movs	r5, #1
 8000740:	1afb      	subs	r3, r7, r3
 8000742:	e707      	b.n	8000554 <__aeabi_fadd+0xd0>
 8000744:	2320      	movs	r3, #32
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	0038      	movs	r0, r7
 800074a:	409f      	lsls	r7, r3
 800074c:	003b      	movs	r3, r7
 800074e:	40d0      	lsrs	r0, r2
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	4193      	sbcs	r3, r2
 8000754:	4303      	orrs	r3, r0
 8000756:	e7ae      	b.n	80006b6 <__aeabi_fadd+0x232>
 8000758:	2320      	movs	r3, #32
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	0039      	movs	r1, r7
 800075e:	409f      	lsls	r7, r3
 8000760:	003b      	movs	r3, r7
 8000762:	40d1      	lsrs	r1, r2
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	4193      	sbcs	r3, r2
 8000768:	430b      	orrs	r3, r1
 800076a:	e773      	b.n	8000654 <__aeabi_fadd+0x1d0>
 800076c:	2f00      	cmp	r7, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x2ee>
 8000770:	e758      	b.n	8000624 <__aeabi_fadd+0x1a0>
 8000772:	4662      	mov	r2, ip
 8000774:	2a00      	cmp	r2, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x2f6>
 8000778:	e755      	b.n	8000626 <__aeabi_fadd+0x1a2>
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	03d2      	lsls	r2, r2, #15
 800077e:	4213      	tst	r3, r2
 8000780:	d100      	bne.n	8000784 <__aeabi_fadd+0x300>
 8000782:	e750      	b.n	8000626 <__aeabi_fadd+0x1a2>
 8000784:	4641      	mov	r1, r8
 8000786:	4211      	tst	r1, r2
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x308>
 800078a:	e74c      	b.n	8000626 <__aeabi_fadd+0x1a2>
 800078c:	4643      	mov	r3, r8
 800078e:	e74a      	b.n	8000626 <__aeabi_fadd+0x1a2>
 8000790:	4663      	mov	r3, ip
 8000792:	2b00      	cmp	r3, #0
 8000794:	d083      	beq.n	800069e <__aeabi_fadd+0x21a>
 8000796:	000c      	movs	r4, r1
 8000798:	4646      	mov	r6, r8
 800079a:	2000      	movs	r0, #0
 800079c:	e6f9      	b.n	8000592 <__aeabi_fadd+0x10e>
 800079e:	4663      	mov	r3, ip
 80007a0:	000c      	movs	r4, r1
 80007a2:	1bdb      	subs	r3, r3, r7
 80007a4:	3501      	adds	r5, #1
 80007a6:	e6d5      	b.n	8000554 <__aeabi_fadd+0xd0>
 80007a8:	4646      	mov	r6, r8
 80007aa:	2000      	movs	r0, #0
 80007ac:	e6f1      	b.n	8000592 <__aeabi_fadd+0x10e>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x330>
 80007b2:	e723      	b.n	80005fc <__aeabi_fadd+0x178>
 80007b4:	2400      	movs	r4, #0
 80007b6:	2600      	movs	r6, #0
 80007b8:	e6eb      	b.n	8000592 <__aeabi_fadd+0x10e>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	7dffffff 	.word	0x7dffffff
 80007c0:	fbffffff 	.word	0xfbffffff

080007c4 <__aeabi_fdiv>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	4646      	mov	r6, r8
 80007ca:	46d6      	mov	lr, sl
 80007cc:	0245      	lsls	r5, r0, #9
 80007ce:	b5c0      	push	{r6, r7, lr}
 80007d0:	0047      	lsls	r7, r0, #1
 80007d2:	1c0c      	adds	r4, r1, #0
 80007d4:	0a6d      	lsrs	r5, r5, #9
 80007d6:	0e3f      	lsrs	r7, r7, #24
 80007d8:	0fc6      	lsrs	r6, r0, #31
 80007da:	2f00      	cmp	r7, #0
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x1c>
 80007de:	e06f      	b.n	80008c0 <__aeabi_fdiv+0xfc>
 80007e0:	2fff      	cmp	r7, #255	; 0xff
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fdiv+0x22>
 80007e4:	e074      	b.n	80008d0 <__aeabi_fdiv+0x10c>
 80007e6:	2300      	movs	r3, #0
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	4699      	mov	r9, r3
 80007ec:	469a      	mov	sl, r3
 80007ee:	00ed      	lsls	r5, r5, #3
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4315      	orrs	r5, r2
 80007f4:	3f7f      	subs	r7, #127	; 0x7f
 80007f6:	0263      	lsls	r3, r4, #9
 80007f8:	0a5b      	lsrs	r3, r3, #9
 80007fa:	4698      	mov	r8, r3
 80007fc:	0063      	lsls	r3, r4, #1
 80007fe:	0e1b      	lsrs	r3, r3, #24
 8000800:	0fe4      	lsrs	r4, r4, #31
 8000802:	2b00      	cmp	r3, #0
 8000804:	d04d      	beq.n	80008a2 <__aeabi_fdiv+0xde>
 8000806:	2bff      	cmp	r3, #255	; 0xff
 8000808:	d045      	beq.n	8000896 <__aeabi_fdiv+0xd2>
 800080a:	4642      	mov	r2, r8
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	00d2      	lsls	r2, r2, #3
 8000810:	04c9      	lsls	r1, r1, #19
 8000812:	4311      	orrs	r1, r2
 8000814:	4688      	mov	r8, r1
 8000816:	2200      	movs	r2, #0
 8000818:	3b7f      	subs	r3, #127	; 0x7f
 800081a:	0031      	movs	r1, r6
 800081c:	1aff      	subs	r7, r7, r3
 800081e:	464b      	mov	r3, r9
 8000820:	4061      	eors	r1, r4
 8000822:	b2c9      	uxtb	r1, r1
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d900      	bls.n	800082a <__aeabi_fdiv+0x66>
 8000828:	e0b8      	b.n	800099c <__aeabi_fdiv+0x1d8>
 800082a:	4870      	ldr	r0, [pc, #448]	; (80009ec <__aeabi_fdiv+0x228>)
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	58c3      	ldr	r3, [r0, r3]
 8000830:	469f      	mov	pc, r3
 8000832:	2300      	movs	r3, #0
 8000834:	4698      	mov	r8, r3
 8000836:	0026      	movs	r6, r4
 8000838:	4645      	mov	r5, r8
 800083a:	4692      	mov	sl, r2
 800083c:	4653      	mov	r3, sl
 800083e:	2b02      	cmp	r3, #2
 8000840:	d100      	bne.n	8000844 <__aeabi_fdiv+0x80>
 8000842:	e08d      	b.n	8000960 <__aeabi_fdiv+0x19c>
 8000844:	2b03      	cmp	r3, #3
 8000846:	d100      	bne.n	800084a <__aeabi_fdiv+0x86>
 8000848:	e0a1      	b.n	800098e <__aeabi_fdiv+0x1ca>
 800084a:	2b01      	cmp	r3, #1
 800084c:	d018      	beq.n	8000880 <__aeabi_fdiv+0xbc>
 800084e:	003b      	movs	r3, r7
 8000850:	337f      	adds	r3, #127	; 0x7f
 8000852:	2b00      	cmp	r3, #0
 8000854:	dd6d      	ble.n	8000932 <__aeabi_fdiv+0x16e>
 8000856:	076a      	lsls	r2, r5, #29
 8000858:	d004      	beq.n	8000864 <__aeabi_fdiv+0xa0>
 800085a:	220f      	movs	r2, #15
 800085c:	402a      	ands	r2, r5
 800085e:	2a04      	cmp	r2, #4
 8000860:	d000      	beq.n	8000864 <__aeabi_fdiv+0xa0>
 8000862:	3504      	adds	r5, #4
 8000864:	012a      	lsls	r2, r5, #4
 8000866:	d503      	bpl.n	8000870 <__aeabi_fdiv+0xac>
 8000868:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <__aeabi_fdiv+0x22c>)
 800086a:	401d      	ands	r5, r3
 800086c:	003b      	movs	r3, r7
 800086e:	3380      	adds	r3, #128	; 0x80
 8000870:	2bfe      	cmp	r3, #254	; 0xfe
 8000872:	dd00      	ble.n	8000876 <__aeabi_fdiv+0xb2>
 8000874:	e074      	b.n	8000960 <__aeabi_fdiv+0x19c>
 8000876:	01aa      	lsls	r2, r5, #6
 8000878:	0a52      	lsrs	r2, r2, #9
 800087a:	b2d8      	uxtb	r0, r3
 800087c:	e002      	b.n	8000884 <__aeabi_fdiv+0xc0>
 800087e:	000e      	movs	r6, r1
 8000880:	2000      	movs	r0, #0
 8000882:	2200      	movs	r2, #0
 8000884:	05c0      	lsls	r0, r0, #23
 8000886:	07f6      	lsls	r6, r6, #31
 8000888:	4310      	orrs	r0, r2
 800088a:	4330      	orrs	r0, r6
 800088c:	bce0      	pop	{r5, r6, r7}
 800088e:	46ba      	mov	sl, r7
 8000890:	46b1      	mov	r9, r6
 8000892:	46a8      	mov	r8, r5
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000896:	4643      	mov	r3, r8
 8000898:	2b00      	cmp	r3, #0
 800089a:	d13f      	bne.n	800091c <__aeabi_fdiv+0x158>
 800089c:	2202      	movs	r2, #2
 800089e:	3fff      	subs	r7, #255	; 0xff
 80008a0:	e003      	b.n	80008aa <__aeabi_fdiv+0xe6>
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d12d      	bne.n	8000904 <__aeabi_fdiv+0x140>
 80008a8:	2201      	movs	r2, #1
 80008aa:	0031      	movs	r1, r6
 80008ac:	464b      	mov	r3, r9
 80008ae:	4061      	eors	r1, r4
 80008b0:	b2c9      	uxtb	r1, r1
 80008b2:	4313      	orrs	r3, r2
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d838      	bhi.n	800092a <__aeabi_fdiv+0x166>
 80008b8:	484e      	ldr	r0, [pc, #312]	; (80009f4 <__aeabi_fdiv+0x230>)
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	58c3      	ldr	r3, [r0, r3]
 80008be:	469f      	mov	pc, r3
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d113      	bne.n	80008ec <__aeabi_fdiv+0x128>
 80008c4:	2304      	movs	r3, #4
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b03      	subs	r3, #3
 80008ca:	2700      	movs	r7, #0
 80008cc:	469a      	mov	sl, r3
 80008ce:	e792      	b.n	80007f6 <__aeabi_fdiv+0x32>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d105      	bne.n	80008e0 <__aeabi_fdiv+0x11c>
 80008d4:	2308      	movs	r3, #8
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b06      	subs	r3, #6
 80008da:	27ff      	movs	r7, #255	; 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e78a      	b.n	80007f6 <__aeabi_fdiv+0x32>
 80008e0:	230c      	movs	r3, #12
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b09      	subs	r3, #9
 80008e6:	27ff      	movs	r7, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e784      	b.n	80007f6 <__aeabi_fdiv+0x32>
 80008ec:	0028      	movs	r0, r5
 80008ee:	f000 fbcb 	bl	8001088 <__clzsi2>
 80008f2:	2776      	movs	r7, #118	; 0x76
 80008f4:	1f43      	subs	r3, r0, #5
 80008f6:	409d      	lsls	r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	427f      	negs	r7, r7
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	1a3f      	subs	r7, r7, r0
 8000902:	e778      	b.n	80007f6 <__aeabi_fdiv+0x32>
 8000904:	4640      	mov	r0, r8
 8000906:	f000 fbbf 	bl	8001088 <__clzsi2>
 800090a:	4642      	mov	r2, r8
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409a      	lsls	r2, r3
 8000910:	2376      	movs	r3, #118	; 0x76
 8000912:	425b      	negs	r3, r3
 8000914:	4690      	mov	r8, r2
 8000916:	1a1b      	subs	r3, r3, r0
 8000918:	2200      	movs	r2, #0
 800091a:	e77e      	b.n	800081a <__aeabi_fdiv+0x56>
 800091c:	2303      	movs	r3, #3
 800091e:	464a      	mov	r2, r9
 8000920:	431a      	orrs	r2, r3
 8000922:	4691      	mov	r9, r2
 8000924:	33fc      	adds	r3, #252	; 0xfc
 8000926:	2203      	movs	r2, #3
 8000928:	e777      	b.n	800081a <__aeabi_fdiv+0x56>
 800092a:	000e      	movs	r6, r1
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	2200      	movs	r2, #0
 8000930:	e7a8      	b.n	8000884 <__aeabi_fdiv+0xc0>
 8000932:	2201      	movs	r2, #1
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b1b      	cmp	r3, #27
 8000938:	dca2      	bgt.n	8000880 <__aeabi_fdiv+0xbc>
 800093a:	379e      	adds	r7, #158	; 0x9e
 800093c:	002a      	movs	r2, r5
 800093e:	40bd      	lsls	r5, r7
 8000940:	40da      	lsrs	r2, r3
 8000942:	1e6b      	subs	r3, r5, #1
 8000944:	419d      	sbcs	r5, r3
 8000946:	4315      	orrs	r5, r2
 8000948:	076a      	lsls	r2, r5, #29
 800094a:	d004      	beq.n	8000956 <__aeabi_fdiv+0x192>
 800094c:	220f      	movs	r2, #15
 800094e:	402a      	ands	r2, r5
 8000950:	2a04      	cmp	r2, #4
 8000952:	d000      	beq.n	8000956 <__aeabi_fdiv+0x192>
 8000954:	3504      	adds	r5, #4
 8000956:	016a      	lsls	r2, r5, #5
 8000958:	d544      	bpl.n	80009e4 <__aeabi_fdiv+0x220>
 800095a:	2001      	movs	r0, #1
 800095c:	2200      	movs	r2, #0
 800095e:	e791      	b.n	8000884 <__aeabi_fdiv+0xc0>
 8000960:	20ff      	movs	r0, #255	; 0xff
 8000962:	2200      	movs	r2, #0
 8000964:	e78e      	b.n	8000884 <__aeabi_fdiv+0xc0>
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	2600      	movs	r6, #0
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	03d2      	lsls	r2, r2, #15
 800096e:	e789      	b.n	8000884 <__aeabi_fdiv+0xc0>
 8000970:	2300      	movs	r3, #0
 8000972:	4698      	mov	r8, r3
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	03d2      	lsls	r2, r2, #15
 8000978:	4215      	tst	r5, r2
 800097a:	d008      	beq.n	800098e <__aeabi_fdiv+0x1ca>
 800097c:	4643      	mov	r3, r8
 800097e:	4213      	tst	r3, r2
 8000980:	d105      	bne.n	800098e <__aeabi_fdiv+0x1ca>
 8000982:	431a      	orrs	r2, r3
 8000984:	0252      	lsls	r2, r2, #9
 8000986:	0026      	movs	r6, r4
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	0a52      	lsrs	r2, r2, #9
 800098c:	e77a      	b.n	8000884 <__aeabi_fdiv+0xc0>
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	432a      	orrs	r2, r5
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	0a52      	lsrs	r2, r2, #9
 800099a:	e773      	b.n	8000884 <__aeabi_fdiv+0xc0>
 800099c:	4642      	mov	r2, r8
 800099e:	016b      	lsls	r3, r5, #5
 80009a0:	0155      	lsls	r5, r2, #5
 80009a2:	42ab      	cmp	r3, r5
 80009a4:	d21a      	bcs.n	80009dc <__aeabi_fdiv+0x218>
 80009a6:	201b      	movs	r0, #27
 80009a8:	2200      	movs	r2, #0
 80009aa:	3f01      	subs	r7, #1
 80009ac:	2601      	movs	r6, #1
 80009ae:	001c      	movs	r4, r3
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	db01      	blt.n	80009bc <__aeabi_fdiv+0x1f8>
 80009b8:	429d      	cmp	r5, r3
 80009ba:	d801      	bhi.n	80009c0 <__aeabi_fdiv+0x1fc>
 80009bc:	1b5b      	subs	r3, r3, r5
 80009be:	4332      	orrs	r2, r6
 80009c0:	3801      	subs	r0, #1
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d1f3      	bne.n	80009ae <__aeabi_fdiv+0x1ea>
 80009c6:	1e58      	subs	r0, r3, #1
 80009c8:	4183      	sbcs	r3, r0
 80009ca:	4313      	orrs	r3, r2
 80009cc:	001d      	movs	r5, r3
 80009ce:	003b      	movs	r3, r7
 80009d0:	337f      	adds	r3, #127	; 0x7f
 80009d2:	000e      	movs	r6, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd00      	ble.n	80009da <__aeabi_fdiv+0x216>
 80009d8:	e73d      	b.n	8000856 <__aeabi_fdiv+0x92>
 80009da:	e7aa      	b.n	8000932 <__aeabi_fdiv+0x16e>
 80009dc:	201a      	movs	r0, #26
 80009de:	2201      	movs	r2, #1
 80009e0:	1b5b      	subs	r3, r3, r5
 80009e2:	e7e3      	b.n	80009ac <__aeabi_fdiv+0x1e8>
 80009e4:	01aa      	lsls	r2, r5, #6
 80009e6:	2000      	movs	r0, #0
 80009e8:	0a52      	lsrs	r2, r2, #9
 80009ea:	e74b      	b.n	8000884 <__aeabi_fdiv+0xc0>
 80009ec:	08004d14 	.word	0x08004d14
 80009f0:	f7ffffff 	.word	0xf7ffffff
 80009f4:	08004d54 	.word	0x08004d54

080009f8 <__aeabi_fmul>:
 80009f8:	0243      	lsls	r3, r0, #9
 80009fa:	0a5b      	lsrs	r3, r3, #9
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	464f      	mov	r7, r9
 8000a00:	4646      	mov	r6, r8
 8000a02:	4699      	mov	r9, r3
 8000a04:	46d6      	mov	lr, sl
 8000a06:	0fc3      	lsrs	r3, r0, #31
 8000a08:	0045      	lsls	r5, r0, #1
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	b5c0      	push	{r6, r7, lr}
 8000a0e:	464b      	mov	r3, r9
 8000a10:	1c0f      	adds	r7, r1, #0
 8000a12:	0e2d      	lsrs	r5, r5, #24
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fmul+0x20>
 8000a16:	e0cb      	b.n	8000bb0 <__aeabi_fmul+0x1b8>
 8000a18:	2dff      	cmp	r5, #255	; 0xff
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fmul+0x26>
 8000a1c:	e0cf      	b.n	8000bbe <__aeabi_fmul+0x1c6>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	04d2      	lsls	r2, r2, #19
 8000a24:	431a      	orrs	r2, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	4691      	mov	r9, r2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	3d7f      	subs	r5, #127	; 0x7f
 8000a30:	027c      	lsls	r4, r7, #9
 8000a32:	007b      	lsls	r3, r7, #1
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	0e1b      	lsrs	r3, r3, #24
 8000a38:	0fff      	lsrs	r7, r7, #31
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fmul+0x48>
 8000a3e:	e0a9      	b.n	8000b94 <__aeabi_fmul+0x19c>
 8000a40:	2bff      	cmp	r3, #255	; 0xff
 8000a42:	d011      	beq.n	8000a68 <__aeabi_fmul+0x70>
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	00e4      	lsls	r4, r4, #3
 8000a48:	04d2      	lsls	r2, r2, #19
 8000a4a:	4314      	orrs	r4, r2
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	3b7f      	subs	r3, #127	; 0x7f
 8000a50:	195b      	adds	r3, r3, r5
 8000a52:	407a      	eors	r2, r7
 8000a54:	2000      	movs	r0, #0
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	1c5d      	adds	r5, r3, #1
 8000a5a:	2e0a      	cmp	r6, #10
 8000a5c:	dd13      	ble.n	8000a86 <__aeabi_fmul+0x8e>
 8000a5e:	003a      	movs	r2, r7
 8000a60:	2e0b      	cmp	r6, #11
 8000a62:	d047      	beq.n	8000af4 <__aeabi_fmul+0xfc>
 8000a64:	4647      	mov	r7, r8
 8000a66:	e03f      	b.n	8000ae8 <__aeabi_fmul+0xf0>
 8000a68:	002b      	movs	r3, r5
 8000a6a:	33ff      	adds	r3, #255	; 0xff
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	d11e      	bne.n	8000aae <__aeabi_fmul+0xb6>
 8000a70:	2202      	movs	r2, #2
 8000a72:	4316      	orrs	r6, r2
 8000a74:	4642      	mov	r2, r8
 8000a76:	3501      	adds	r5, #1
 8000a78:	407a      	eors	r2, r7
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	35ff      	adds	r5, #255	; 0xff
 8000a7e:	2e0a      	cmp	r6, #10
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_fmul+0x8c>
 8000a82:	e0e4      	b.n	8000c4e <__aeabi_fmul+0x256>
 8000a84:	2002      	movs	r0, #2
 8000a86:	2e02      	cmp	r6, #2
 8000a88:	dc1c      	bgt.n	8000ac4 <__aeabi_fmul+0xcc>
 8000a8a:	3e01      	subs	r6, #1
 8000a8c:	2e01      	cmp	r6, #1
 8000a8e:	d842      	bhi.n	8000b16 <__aeabi_fmul+0x11e>
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d03d      	beq.n	8000b10 <__aeabi_fmul+0x118>
 8000a94:	2801      	cmp	r0, #1
 8000a96:	d166      	bne.n	8000b66 <__aeabi_fmul+0x16e>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	05c0      	lsls	r0, r0, #23
 8000a9e:	4308      	orrs	r0, r1
 8000aa0:	07d2      	lsls	r2, r2, #31
 8000aa2:	4310      	orrs	r0, r2
 8000aa4:	bce0      	pop	{r5, r6, r7}
 8000aa6:	46ba      	mov	sl, r7
 8000aa8:	46b1      	mov	r9, r6
 8000aaa:	46a8      	mov	r8, r5
 8000aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4316      	orrs	r6, r2
 8000ab2:	4642      	mov	r2, r8
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	407a      	eors	r2, r7
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	35ff      	adds	r5, #255	; 0xff
 8000abc:	2e0a      	cmp	r6, #10
 8000abe:	dd00      	ble.n	8000ac2 <__aeabi_fmul+0xca>
 8000ac0:	e0e4      	b.n	8000c8c <__aeabi_fmul+0x294>
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	40b1      	lsls	r1, r6
 8000ac8:	26a6      	movs	r6, #166	; 0xa6
 8000aca:	00f6      	lsls	r6, r6, #3
 8000acc:	4231      	tst	r1, r6
 8000ace:	d10a      	bne.n	8000ae6 <__aeabi_fmul+0xee>
 8000ad0:	2690      	movs	r6, #144	; 0x90
 8000ad2:	00b6      	lsls	r6, r6, #2
 8000ad4:	4231      	tst	r1, r6
 8000ad6:	d116      	bne.n	8000b06 <__aeabi_fmul+0x10e>
 8000ad8:	3eb9      	subs	r6, #185	; 0xb9
 8000ada:	3eff      	subs	r6, #255	; 0xff
 8000adc:	420e      	tst	r6, r1
 8000ade:	d01a      	beq.n	8000b16 <__aeabi_fmul+0x11e>
 8000ae0:	46a1      	mov	r9, r4
 8000ae2:	4682      	mov	sl, r0
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_fmul+0xf0>
 8000ae6:	0017      	movs	r7, r2
 8000ae8:	4653      	mov	r3, sl
 8000aea:	003a      	movs	r2, r7
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d00f      	beq.n	8000b10 <__aeabi_fmul+0x118>
 8000af0:	464c      	mov	r4, r9
 8000af2:	4650      	mov	r0, sl
 8000af4:	2803      	cmp	r0, #3
 8000af6:	d1cd      	bne.n	8000a94 <__aeabi_fmul+0x9c>
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	03c9      	lsls	r1, r1, #15
 8000afc:	4321      	orrs	r1, r4
 8000afe:	0249      	lsls	r1, r1, #9
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a49      	lsrs	r1, r1, #9
 8000b04:	e7ca      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	2200      	movs	r2, #0
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	03c9      	lsls	r1, r1, #15
 8000b0e:	e7c5      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000b10:	20ff      	movs	r0, #255	; 0xff
 8000b12:	2100      	movs	r1, #0
 8000b14:	e7c2      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000b16:	0c20      	lsrs	r0, r4, #16
 8000b18:	4649      	mov	r1, r9
 8000b1a:	0424      	lsls	r4, r4, #16
 8000b1c:	0c24      	lsrs	r4, r4, #16
 8000b1e:	0027      	movs	r7, r4
 8000b20:	0c0e      	lsrs	r6, r1, #16
 8000b22:	0409      	lsls	r1, r1, #16
 8000b24:	0c09      	lsrs	r1, r1, #16
 8000b26:	4374      	muls	r4, r6
 8000b28:	434f      	muls	r7, r1
 8000b2a:	4346      	muls	r6, r0
 8000b2c:	4348      	muls	r0, r1
 8000b2e:	0c39      	lsrs	r1, r7, #16
 8000b30:	1900      	adds	r0, r0, r4
 8000b32:	1809      	adds	r1, r1, r0
 8000b34:	428c      	cmp	r4, r1
 8000b36:	d903      	bls.n	8000b40 <__aeabi_fmul+0x148>
 8000b38:	2080      	movs	r0, #128	; 0x80
 8000b3a:	0240      	lsls	r0, r0, #9
 8000b3c:	4684      	mov	ip, r0
 8000b3e:	4466      	add	r6, ip
 8000b40:	043f      	lsls	r7, r7, #16
 8000b42:	0408      	lsls	r0, r1, #16
 8000b44:	0c3f      	lsrs	r7, r7, #16
 8000b46:	19c0      	adds	r0, r0, r7
 8000b48:	0184      	lsls	r4, r0, #6
 8000b4a:	1e67      	subs	r7, r4, #1
 8000b4c:	41bc      	sbcs	r4, r7
 8000b4e:	0c09      	lsrs	r1, r1, #16
 8000b50:	0e80      	lsrs	r0, r0, #26
 8000b52:	1989      	adds	r1, r1, r6
 8000b54:	4304      	orrs	r4, r0
 8000b56:	0189      	lsls	r1, r1, #6
 8000b58:	430c      	orrs	r4, r1
 8000b5a:	0109      	lsls	r1, r1, #4
 8000b5c:	d571      	bpl.n	8000c42 <__aeabi_fmul+0x24a>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	0861      	lsrs	r1, r4, #1
 8000b62:	401c      	ands	r4, r3
 8000b64:	430c      	orrs	r4, r1
 8000b66:	002b      	movs	r3, r5
 8000b68:	337f      	adds	r3, #127	; 0x7f
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd51      	ble.n	8000c12 <__aeabi_fmul+0x21a>
 8000b6e:	0761      	lsls	r1, r4, #29
 8000b70:	d004      	beq.n	8000b7c <__aeabi_fmul+0x184>
 8000b72:	210f      	movs	r1, #15
 8000b74:	4021      	ands	r1, r4
 8000b76:	2904      	cmp	r1, #4
 8000b78:	d000      	beq.n	8000b7c <__aeabi_fmul+0x184>
 8000b7a:	3404      	adds	r4, #4
 8000b7c:	0121      	lsls	r1, r4, #4
 8000b7e:	d503      	bpl.n	8000b88 <__aeabi_fmul+0x190>
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <__aeabi_fmul+0x298>)
 8000b82:	401c      	ands	r4, r3
 8000b84:	002b      	movs	r3, r5
 8000b86:	3380      	adds	r3, #128	; 0x80
 8000b88:	2bfe      	cmp	r3, #254	; 0xfe
 8000b8a:	dcc1      	bgt.n	8000b10 <__aeabi_fmul+0x118>
 8000b8c:	01a1      	lsls	r1, r4, #6
 8000b8e:	0a49      	lsrs	r1, r1, #9
 8000b90:	b2d8      	uxtb	r0, r3
 8000b92:	e783      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d12c      	bne.n	8000bf2 <__aeabi_fmul+0x1fa>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	431e      	orrs	r6, r3
 8000b9e:	002b      	movs	r3, r5
 8000ba0:	407a      	eors	r2, r7
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	1c5d      	adds	r5, r3, #1
 8000ba8:	2e0a      	cmp	r6, #10
 8000baa:	dd00      	ble.n	8000bae <__aeabi_fmul+0x1b6>
 8000bac:	e757      	b.n	8000a5e <__aeabi_fmul+0x66>
 8000bae:	e76a      	b.n	8000a86 <__aeabi_fmul+0x8e>
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d110      	bne.n	8000bd6 <__aeabi_fmul+0x1de>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2604      	movs	r6, #4
 8000bb8:	2500      	movs	r5, #0
 8000bba:	469a      	mov	sl, r3
 8000bbc:	e738      	b.n	8000a30 <__aeabi_fmul+0x38>
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d104      	bne.n	8000bcc <__aeabi_fmul+0x1d4>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	2608      	movs	r6, #8
 8000bc6:	25ff      	movs	r5, #255	; 0xff
 8000bc8:	469a      	mov	sl, r3
 8000bca:	e731      	b.n	8000a30 <__aeabi_fmul+0x38>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	260c      	movs	r6, #12
 8000bd0:	25ff      	movs	r5, #255	; 0xff
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	e72c      	b.n	8000a30 <__aeabi_fmul+0x38>
 8000bd6:	4648      	mov	r0, r9
 8000bd8:	f000 fa56 	bl	8001088 <__clzsi2>
 8000bdc:	464a      	mov	r2, r9
 8000bde:	1f43      	subs	r3, r0, #5
 8000be0:	2576      	movs	r5, #118	; 0x76
 8000be2:	409a      	lsls	r2, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	426d      	negs	r5, r5
 8000be8:	4691      	mov	r9, r2
 8000bea:	2600      	movs	r6, #0
 8000bec:	469a      	mov	sl, r3
 8000bee:	1a2d      	subs	r5, r5, r0
 8000bf0:	e71e      	b.n	8000a30 <__aeabi_fmul+0x38>
 8000bf2:	0020      	movs	r0, r4
 8000bf4:	f000 fa48 	bl	8001088 <__clzsi2>
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	1f43      	subs	r3, r0, #5
 8000bfc:	409c      	lsls	r4, r3
 8000bfe:	1a2b      	subs	r3, r5, r0
 8000c00:	3b76      	subs	r3, #118	; 0x76
 8000c02:	407a      	eors	r2, r7
 8000c04:	2000      	movs	r0, #0
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	1c5d      	adds	r5, r3, #1
 8000c0a:	2e0a      	cmp	r6, #10
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fmul+0x218>
 8000c0e:	e726      	b.n	8000a5e <__aeabi_fmul+0x66>
 8000c10:	e739      	b.n	8000a86 <__aeabi_fmul+0x8e>
 8000c12:	2101      	movs	r1, #1
 8000c14:	1acb      	subs	r3, r1, r3
 8000c16:	2b1b      	cmp	r3, #27
 8000c18:	dd00      	ble.n	8000c1c <__aeabi_fmul+0x224>
 8000c1a:	e73d      	b.n	8000a98 <__aeabi_fmul+0xa0>
 8000c1c:	359e      	adds	r5, #158	; 0x9e
 8000c1e:	0021      	movs	r1, r4
 8000c20:	40ac      	lsls	r4, r5
 8000c22:	40d9      	lsrs	r1, r3
 8000c24:	1e63      	subs	r3, r4, #1
 8000c26:	419c      	sbcs	r4, r3
 8000c28:	4321      	orrs	r1, r4
 8000c2a:	074b      	lsls	r3, r1, #29
 8000c2c:	d004      	beq.n	8000c38 <__aeabi_fmul+0x240>
 8000c2e:	230f      	movs	r3, #15
 8000c30:	400b      	ands	r3, r1
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fmul+0x240>
 8000c36:	3104      	adds	r1, #4
 8000c38:	014b      	lsls	r3, r1, #5
 8000c3a:	d504      	bpl.n	8000c46 <__aeabi_fmul+0x24e>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e72c      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000c42:	001d      	movs	r5, r3
 8000c44:	e78f      	b.n	8000b66 <__aeabi_fmul+0x16e>
 8000c46:	0189      	lsls	r1, r1, #6
 8000c48:	2000      	movs	r0, #0
 8000c4a:	0a49      	lsrs	r1, r1, #9
 8000c4c:	e726      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	2e0f      	cmp	r6, #15
 8000c52:	d10c      	bne.n	8000c6e <__aeabi_fmul+0x276>
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	464b      	mov	r3, r9
 8000c58:	03c9      	lsls	r1, r1, #15
 8000c5a:	420b      	tst	r3, r1
 8000c5c:	d00d      	beq.n	8000c7a <__aeabi_fmul+0x282>
 8000c5e:	420c      	tst	r4, r1
 8000c60:	d10b      	bne.n	8000c7a <__aeabi_fmul+0x282>
 8000c62:	4321      	orrs	r1, r4
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	003a      	movs	r2, r7
 8000c68:	20ff      	movs	r0, #255	; 0xff
 8000c6a:	0a49      	lsrs	r1, r1, #9
 8000c6c:	e716      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000c6e:	2e0b      	cmp	r6, #11
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fmul+0x27c>
 8000c72:	e6f7      	b.n	8000a64 <__aeabi_fmul+0x6c>
 8000c74:	46a1      	mov	r9, r4
 8000c76:	469a      	mov	sl, r3
 8000c78:	e736      	b.n	8000ae8 <__aeabi_fmul+0xf0>
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	03c9      	lsls	r1, r1, #15
 8000c80:	4319      	orrs	r1, r3
 8000c82:	0249      	lsls	r1, r1, #9
 8000c84:	4642      	mov	r2, r8
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	0a49      	lsrs	r1, r1, #9
 8000c8a:	e707      	b.n	8000a9c <__aeabi_fmul+0xa4>
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e7df      	b.n	8000c50 <__aeabi_fmul+0x258>
 8000c90:	f7ffffff 	.word	0xf7ffffff

08000c94 <__aeabi_fsub>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	46c6      	mov	lr, r8
 8000c98:	0243      	lsls	r3, r0, #9
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	0045      	lsls	r5, r0, #1
 8000c9e:	00da      	lsls	r2, r3, #3
 8000ca0:	0fc4      	lsrs	r4, r0, #31
 8000ca2:	0248      	lsls	r0, r1, #9
 8000ca4:	004f      	lsls	r7, r1, #1
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	0a42      	lsrs	r2, r0, #9
 8000caa:	001e      	movs	r6, r3
 8000cac:	4690      	mov	r8, r2
 8000cae:	b500      	push	{lr}
 8000cb0:	0e2d      	lsrs	r5, r5, #24
 8000cb2:	0e3f      	lsrs	r7, r7, #24
 8000cb4:	0fc9      	lsrs	r1, r1, #31
 8000cb6:	0980      	lsrs	r0, r0, #6
 8000cb8:	2fff      	cmp	r7, #255	; 0xff
 8000cba:	d059      	beq.n	8000d70 <__aeabi_fsub+0xdc>
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4051      	eors	r1, r2
 8000cc0:	428c      	cmp	r4, r1
 8000cc2:	d039      	beq.n	8000d38 <__aeabi_fsub+0xa4>
 8000cc4:	1bea      	subs	r2, r5, r7
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	dd58      	ble.n	8000d7c <__aeabi_fsub+0xe8>
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d068      	beq.n	8000da0 <__aeabi_fsub+0x10c>
 8000cce:	2dff      	cmp	r5, #255	; 0xff
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x40>
 8000cd2:	e0d1      	b.n	8000e78 <__aeabi_fsub+0x1e4>
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	04db      	lsls	r3, r3, #19
 8000cd8:	4318      	orrs	r0, r3
 8000cda:	2a1b      	cmp	r2, #27
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_fsub+0x4c>
 8000cde:	e0e3      	b.n	8000ea8 <__aeabi_fsub+0x214>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	015a      	lsls	r2, r3, #5
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_fsub+0x58>
 8000cea:	e0ac      	b.n	8000e46 <__aeabi_fsub+0x1b2>
 8000cec:	019b      	lsls	r3, r3, #6
 8000cee:	099e      	lsrs	r6, r3, #6
 8000cf0:	0030      	movs	r0, r6
 8000cf2:	f000 f9c9 	bl	8001088 <__clzsi2>
 8000cf6:	0033      	movs	r3, r6
 8000cf8:	3805      	subs	r0, #5
 8000cfa:	4083      	lsls	r3, r0
 8000cfc:	4285      	cmp	r5, r0
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_fsub+0x6e>
 8000d00:	e0c6      	b.n	8000e90 <__aeabi_fsub+0x1fc>
 8000d02:	4ab2      	ldr	r2, [pc, #712]	; (8000fcc <__aeabi_fsub+0x338>)
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	4013      	ands	r3, r2
 8000d08:	075a      	lsls	r2, r3, #29
 8000d0a:	d004      	beq.n	8000d16 <__aeabi_fsub+0x82>
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	401a      	ands	r2, r3
 8000d10:	2a04      	cmp	r2, #4
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fsub+0x82>
 8000d14:	3304      	adds	r3, #4
 8000d16:	015a      	lsls	r2, r3, #5
 8000d18:	d400      	bmi.n	8000d1c <__aeabi_fsub+0x88>
 8000d1a:	e097      	b.n	8000e4c <__aeabi_fsub+0x1b8>
 8000d1c:	1c6a      	adds	r2, r5, #1
 8000d1e:	2dfe      	cmp	r5, #254	; 0xfe
 8000d20:	d100      	bne.n	8000d24 <__aeabi_fsub+0x90>
 8000d22:	e084      	b.n	8000e2e <__aeabi_fsub+0x19a>
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	0a5e      	lsrs	r6, r3, #9
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	05d0      	lsls	r0, r2, #23
 8000d2c:	4330      	orrs	r0, r6
 8000d2e:	07e4      	lsls	r4, r4, #31
 8000d30:	4320      	orrs	r0, r4
 8000d32:	bc80      	pop	{r7}
 8000d34:	46b8      	mov	r8, r7
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d38:	1bea      	subs	r2, r5, r7
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	dd41      	ble.n	8000dc2 <__aeabi_fsub+0x12e>
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d06b      	beq.n	8000e1a <__aeabi_fsub+0x186>
 8000d42:	2dff      	cmp	r5, #255	; 0xff
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0xb4>
 8000d46:	e097      	b.n	8000e78 <__aeabi_fsub+0x1e4>
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	4318      	orrs	r0, r3
 8000d4e:	2a1b      	cmp	r2, #27
 8000d50:	dc00      	bgt.n	8000d54 <__aeabi_fsub+0xc0>
 8000d52:	e0cc      	b.n	8000eee <__aeabi_fsub+0x25a>
 8000d54:	2301      	movs	r3, #1
 8000d56:	4463      	add	r3, ip
 8000d58:	015a      	lsls	r2, r3, #5
 8000d5a:	d574      	bpl.n	8000e46 <__aeabi_fsub+0x1b2>
 8000d5c:	3501      	adds	r5, #1
 8000d5e:	2dff      	cmp	r5, #255	; 0xff
 8000d60:	d065      	beq.n	8000e2e <__aeabi_fsub+0x19a>
 8000d62:	2201      	movs	r2, #1
 8000d64:	499a      	ldr	r1, [pc, #616]	; (8000fd0 <__aeabi_fsub+0x33c>)
 8000d66:	401a      	ands	r2, r3
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	e7cb      	b.n	8000d08 <__aeabi_fsub+0x74>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d01f      	beq.n	8000db4 <__aeabi_fsub+0x120>
 8000d74:	428c      	cmp	r4, r1
 8000d76:	d022      	beq.n	8000dbe <__aeabi_fsub+0x12a>
 8000d78:	002a      	movs	r2, r5
 8000d7a:	3aff      	subs	r2, #255	; 0xff
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d035      	beq.n	8000dec <__aeabi_fsub+0x158>
 8000d80:	1b7a      	subs	r2, r7, r5
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fsub+0xf4>
 8000d86:	e099      	b.n	8000ebc <__aeabi_fsub+0x228>
 8000d88:	4663      	mov	r3, ip
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0xfc>
 8000d8e:	e0dd      	b.n	8000f4c <__aeabi_fsub+0x2b8>
 8000d90:	1e53      	subs	r3, r2, #1
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x104>
 8000d96:	e105      	b.n	8000fa4 <__aeabi_fsub+0x310>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d06b      	beq.n	8000e74 <__aeabi_fsub+0x1e0>
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	e094      	b.n	8000eca <__aeabi_fsub+0x236>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d073      	beq.n	8000e8c <__aeabi_fsub+0x1f8>
 8000da4:	1e51      	subs	r1, r2, #1
 8000da6:	2a01      	cmp	r2, #1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x118>
 8000daa:	e0df      	b.n	8000f6c <__aeabi_fsub+0x2d8>
 8000dac:	2aff      	cmp	r2, #255	; 0xff
 8000dae:	d063      	beq.n	8000e78 <__aeabi_fsub+0x1e4>
 8000db0:	000a      	movs	r2, r1
 8000db2:	e792      	b.n	8000cda <__aeabi_fsub+0x46>
 8000db4:	2201      	movs	r2, #1
 8000db6:	4051      	eors	r1, r2
 8000db8:	42a1      	cmp	r1, r4
 8000dba:	d000      	beq.n	8000dbe <__aeabi_fsub+0x12a>
 8000dbc:	e782      	b.n	8000cc4 <__aeabi_fsub+0x30>
 8000dbe:	002a      	movs	r2, r5
 8000dc0:	3aff      	subs	r2, #255	; 0xff
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d036      	beq.n	8000e34 <__aeabi_fsub+0x1a0>
 8000dc6:	1b7a      	subs	r2, r7, r5
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x13a>
 8000dcc:	e0aa      	b.n	8000f24 <__aeabi_fsub+0x290>
 8000dce:	2fff      	cmp	r7, #255	; 0xff
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x140>
 8000dd2:	e0da      	b.n	8000f8a <__aeabi_fsub+0x2f6>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	4661      	mov	r1, ip
 8000dd8:	04db      	lsls	r3, r3, #19
 8000dda:	4319      	orrs	r1, r3
 8000ddc:	468c      	mov	ip, r1
 8000dde:	2a1b      	cmp	r2, #27
 8000de0:	dc00      	bgt.n	8000de4 <__aeabi_fsub+0x150>
 8000de2:	e0d4      	b.n	8000f8e <__aeabi_fsub+0x2fa>
 8000de4:	2301      	movs	r3, #1
 8000de6:	003d      	movs	r5, r7
 8000de8:	181b      	adds	r3, r3, r0
 8000dea:	e7b5      	b.n	8000d58 <__aeabi_fsub+0xc4>
 8000dec:	27fe      	movs	r7, #254	; 0xfe
 8000dee:	1c6a      	adds	r2, r5, #1
 8000df0:	4217      	tst	r7, r2
 8000df2:	d171      	bne.n	8000ed8 <__aeabi_fsub+0x244>
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fsub+0x166>
 8000df8:	e09e      	b.n	8000f38 <__aeabi_fsub+0x2a4>
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x16e>
 8000e00:	e0d5      	b.n	8000fae <__aeabi_fsub+0x31a>
 8000e02:	2200      	movs	r2, #0
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_fsub+0x176>
 8000e08:	e78f      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000e0a:	1a1b      	subs	r3, r3, r0
 8000e0c:	015e      	lsls	r6, r3, #5
 8000e0e:	d400      	bmi.n	8000e12 <__aeabi_fsub+0x17e>
 8000e10:	e0d6      	b.n	8000fc0 <__aeabi_fsub+0x32c>
 8000e12:	4663      	mov	r3, ip
 8000e14:	000c      	movs	r4, r1
 8000e16:	1ac3      	subs	r3, r0, r3
 8000e18:	e776      	b.n	8000d08 <__aeabi_fsub+0x74>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d036      	beq.n	8000e8c <__aeabi_fsub+0x1f8>
 8000e1e:	1e51      	subs	r1, r2, #1
 8000e20:	2a01      	cmp	r2, #1
 8000e22:	d100      	bne.n	8000e26 <__aeabi_fsub+0x192>
 8000e24:	e09a      	b.n	8000f5c <__aeabi_fsub+0x2c8>
 8000e26:	2aff      	cmp	r2, #255	; 0xff
 8000e28:	d026      	beq.n	8000e78 <__aeabi_fsub+0x1e4>
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	e78f      	b.n	8000d4e <__aeabi_fsub+0xba>
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	2600      	movs	r6, #0
 8000e32:	e77a      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000e34:	27fe      	movs	r7, #254	; 0xfe
 8000e36:	1c6a      	adds	r2, r5, #1
 8000e38:	4217      	tst	r7, r2
 8000e3a:	d062      	beq.n	8000f02 <__aeabi_fsub+0x26e>
 8000e3c:	2aff      	cmp	r2, #255	; 0xff
 8000e3e:	d0f6      	beq.n	8000e2e <__aeabi_fsub+0x19a>
 8000e40:	0015      	movs	r5, r2
 8000e42:	4460      	add	r0, ip
 8000e44:	0843      	lsrs	r3, r0, #1
 8000e46:	075a      	lsls	r2, r3, #29
 8000e48:	d000      	beq.n	8000e4c <__aeabi_fsub+0x1b8>
 8000e4a:	e75f      	b.n	8000d0c <__aeabi_fsub+0x78>
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	2dff      	cmp	r5, #255	; 0xff
 8000e50:	d012      	beq.n	8000e78 <__aeabi_fsub+0x1e4>
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	0a5e      	lsrs	r6, r3, #9
 8000e56:	b2ea      	uxtb	r2, r5
 8000e58:	e767      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0x1ce>
 8000e60:	e093      	b.n	8000f8a <__aeabi_fsub+0x2f6>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d008      	beq.n	8000e78 <__aeabi_fsub+0x1e4>
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	03d2      	lsls	r2, r2, #15
 8000e6a:	4213      	tst	r3, r2
 8000e6c:	d004      	beq.n	8000e78 <__aeabi_fsub+0x1e4>
 8000e6e:	4640      	mov	r0, r8
 8000e70:	4210      	tst	r0, r2
 8000e72:	d101      	bne.n	8000e78 <__aeabi_fsub+0x1e4>
 8000e74:	000c      	movs	r4, r1
 8000e76:	4643      	mov	r3, r8
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0d8      	beq.n	8000e2e <__aeabi_fsub+0x19a>
 8000e7c:	2680      	movs	r6, #128	; 0x80
 8000e7e:	03f6      	lsls	r6, r6, #15
 8000e80:	431e      	orrs	r6, r3
 8000e82:	0276      	lsls	r6, r6, #9
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	0a76      	lsrs	r6, r6, #9
 8000e88:	e74f      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	0015      	movs	r5, r2
 8000e8e:	e7de      	b.n	8000e4e <__aeabi_fsub+0x1ba>
 8000e90:	2220      	movs	r2, #32
 8000e92:	1b40      	subs	r0, r0, r5
 8000e94:	3001      	adds	r0, #1
 8000e96:	1a12      	subs	r2, r2, r0
 8000e98:	0019      	movs	r1, r3
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	40c1      	lsrs	r1, r0
 8000e9e:	1e5a      	subs	r2, r3, #1
 8000ea0:	4193      	sbcs	r3, r2
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	e72f      	b.n	8000d08 <__aeabi_fsub+0x74>
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	0001      	movs	r1, r0
 8000eae:	4098      	lsls	r0, r3
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	40d1      	lsrs	r1, r2
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	4193      	sbcs	r3, r2
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	e712      	b.n	8000ce2 <__aeabi_fsub+0x4e>
 8000ebc:	2fff      	cmp	r7, #255	; 0xff
 8000ebe:	d0d9      	beq.n	8000e74 <__aeabi_fsub+0x1e0>
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	4664      	mov	r4, ip
 8000ec4:	04db      	lsls	r3, r3, #19
 8000ec6:	431c      	orrs	r4, r3
 8000ec8:	46a4      	mov	ip, r4
 8000eca:	2a1b      	cmp	r2, #27
 8000ecc:	dd52      	ble.n	8000f74 <__aeabi_fsub+0x2e0>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	003d      	movs	r5, r7
 8000ed4:	1ac3      	subs	r3, r0, r3
 8000ed6:	e706      	b.n	8000ce6 <__aeabi_fsub+0x52>
 8000ed8:	4663      	mov	r3, ip
 8000eda:	1a1e      	subs	r6, r3, r0
 8000edc:	0173      	lsls	r3, r6, #5
 8000ede:	d439      	bmi.n	8000f54 <__aeabi_fsub+0x2c0>
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x252>
 8000ee4:	e704      	b.n	8000cf0 <__aeabi_fsub+0x5c>
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2600      	movs	r6, #0
 8000eec:	e71d      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000eee:	2320      	movs	r3, #32
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	0001      	movs	r1, r0
 8000ef4:	4098      	lsls	r0, r3
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	40d1      	lsrs	r1, r2
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	4193      	sbcs	r3, r2
 8000efe:	430b      	orrs	r3, r1
 8000f00:	e729      	b.n	8000d56 <__aeabi_fsub+0xc2>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d1a9      	bne.n	8000e5a <__aeabi_fsub+0x1c6>
 8000f06:	4663      	mov	r3, ip
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d056      	beq.n	8000fba <__aeabi_fsub+0x326>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x280>
 8000f12:	e70a      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000f14:	0003      	movs	r3, r0
 8000f16:	4463      	add	r3, ip
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	d594      	bpl.n	8000e46 <__aeabi_fsub+0x1b2>
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <__aeabi_fsub+0x338>)
 8000f1e:	3501      	adds	r5, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	e790      	b.n	8000e46 <__aeabi_fsub+0x1b2>
 8000f24:	4663      	mov	r3, ip
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0af      	beq.n	8000e8a <__aeabi_fsub+0x1f6>
 8000f2a:	1e53      	subs	r3, r2, #1
 8000f2c:	2a01      	cmp	r2, #1
 8000f2e:	d015      	beq.n	8000f5c <__aeabi_fsub+0x2c8>
 8000f30:	2aff      	cmp	r2, #255	; 0xff
 8000f32:	d02a      	beq.n	8000f8a <__aeabi_fsub+0x2f6>
 8000f34:	001a      	movs	r2, r3
 8000f36:	e752      	b.n	8000dde <__aeabi_fsub+0x14a>
 8000f38:	4662      	mov	r2, ip
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d191      	bne.n	8000e62 <__aeabi_fsub+0x1ce>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d198      	bne.n	8000e74 <__aeabi_fsub+0x1e0>
 8000f42:	2680      	movs	r6, #128	; 0x80
 8000f44:	2400      	movs	r4, #0
 8000f46:	22ff      	movs	r2, #255	; 0xff
 8000f48:	03f6      	lsls	r6, r6, #15
 8000f4a:	e6ee      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000f4c:	000c      	movs	r4, r1
 8000f4e:	4643      	mov	r3, r8
 8000f50:	0015      	movs	r5, r2
 8000f52:	e77c      	b.n	8000e4e <__aeabi_fsub+0x1ba>
 8000f54:	4663      	mov	r3, ip
 8000f56:	000c      	movs	r4, r1
 8000f58:	1ac6      	subs	r6, r0, r3
 8000f5a:	e6c9      	b.n	8000cf0 <__aeabi_fsub+0x5c>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4463      	add	r3, ip
 8000f60:	2501      	movs	r5, #1
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	d400      	bmi.n	8000f68 <__aeabi_fsub+0x2d4>
 8000f66:	e76e      	b.n	8000e46 <__aeabi_fsub+0x1b2>
 8000f68:	2502      	movs	r5, #2
 8000f6a:	e6fa      	b.n	8000d62 <__aeabi_fsub+0xce>
 8000f6c:	4663      	mov	r3, ip
 8000f6e:	2501      	movs	r5, #1
 8000f70:	1a1b      	subs	r3, r3, r0
 8000f72:	e6b8      	b.n	8000ce6 <__aeabi_fsub+0x52>
 8000f74:	4664      	mov	r4, ip
 8000f76:	2320      	movs	r3, #32
 8000f78:	40d4      	lsrs	r4, r2
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	4662      	mov	r2, ip
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	4193      	sbcs	r3, r2
 8000f86:	4323      	orrs	r3, r4
 8000f88:	e7a2      	b.n	8000ed0 <__aeabi_fsub+0x23c>
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	e774      	b.n	8000e78 <__aeabi_fsub+0x1e4>
 8000f8e:	4661      	mov	r1, ip
 8000f90:	2320      	movs	r3, #32
 8000f92:	40d1      	lsrs	r1, r2
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	4662      	mov	r2, ip
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	4193      	sbcs	r3, r2
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	e720      	b.n	8000de6 <__aeabi_fsub+0x152>
 8000fa4:	4663      	mov	r3, ip
 8000fa6:	000c      	movs	r4, r1
 8000fa8:	2501      	movs	r5, #1
 8000faa:	1ac3      	subs	r3, r0, r3
 8000fac:	e69b      	b.n	8000ce6 <__aeabi_fsub+0x52>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d099      	beq.n	8000ee6 <__aeabi_fsub+0x252>
 8000fb2:	000c      	movs	r4, r1
 8000fb4:	4646      	mov	r6, r8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	e6b7      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000fba:	4646      	mov	r6, r8
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	e6b4      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x332>
 8000fc4:	e73f      	b.n	8000e46 <__aeabi_fsub+0x1b2>
 8000fc6:	2400      	movs	r4, #0
 8000fc8:	2600      	movs	r6, #0
 8000fca:	e6ae      	b.n	8000d2a <__aeabi_fsub+0x96>
 8000fcc:	fbffffff 	.word	0xfbffffff
 8000fd0:	7dffffff 	.word	0x7dffffff

08000fd4 <__aeabi_f2iz>:
 8000fd4:	0241      	lsls	r1, r0, #9
 8000fd6:	0042      	lsls	r2, r0, #1
 8000fd8:	0fc3      	lsrs	r3, r0, #31
 8000fda:	0a49      	lsrs	r1, r1, #9
 8000fdc:	2000      	movs	r0, #0
 8000fde:	0e12      	lsrs	r2, r2, #24
 8000fe0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fe2:	dd03      	ble.n	8000fec <__aeabi_f2iz+0x18>
 8000fe4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fe6:	dd02      	ble.n	8000fee <__aeabi_f2iz+0x1a>
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <__aeabi_f2iz+0x3c>)
 8000fea:	1898      	adds	r0, r3, r2
 8000fec:	4770      	bx	lr
 8000fee:	2080      	movs	r0, #128	; 0x80
 8000ff0:	0400      	lsls	r0, r0, #16
 8000ff2:	4301      	orrs	r1, r0
 8000ff4:	2a95      	cmp	r2, #149	; 0x95
 8000ff6:	dc07      	bgt.n	8001008 <__aeabi_f2iz+0x34>
 8000ff8:	2096      	movs	r0, #150	; 0x96
 8000ffa:	1a82      	subs	r2, r0, r2
 8000ffc:	40d1      	lsrs	r1, r2
 8000ffe:	4248      	negs	r0, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f3      	bne.n	8000fec <__aeabi_f2iz+0x18>
 8001004:	0008      	movs	r0, r1
 8001006:	e7f1      	b.n	8000fec <__aeabi_f2iz+0x18>
 8001008:	3a96      	subs	r2, #150	; 0x96
 800100a:	4091      	lsls	r1, r2
 800100c:	e7f7      	b.n	8000ffe <__aeabi_f2iz+0x2a>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	7fffffff 	.word	0x7fffffff

08001014 <__aeabi_cfrcmple>:
 8001014:	4684      	mov	ip, r0
 8001016:	0008      	movs	r0, r1
 8001018:	4661      	mov	r1, ip
 800101a:	e7ff      	b.n	800101c <__aeabi_cfcmpeq>

0800101c <__aeabi_cfcmpeq>:
 800101c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800101e:	f000 f8c9 	bl	80011b4 <__lesf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	d401      	bmi.n	800102a <__aeabi_cfcmpeq+0xe>
 8001026:	2100      	movs	r1, #0
 8001028:	42c8      	cmn	r0, r1
 800102a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800102c <__aeabi_fcmpeq>:
 800102c:	b510      	push	{r4, lr}
 800102e:	f000 f855 	bl	80010dc <__eqsf2>
 8001032:	4240      	negs	r0, r0
 8001034:	3001      	adds	r0, #1
 8001036:	bd10      	pop	{r4, pc}

08001038 <__aeabi_fcmplt>:
 8001038:	b510      	push	{r4, lr}
 800103a:	f000 f8bb 	bl	80011b4 <__lesf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	db01      	blt.n	8001046 <__aeabi_fcmplt+0xe>
 8001042:	2000      	movs	r0, #0
 8001044:	bd10      	pop	{r4, pc}
 8001046:	2001      	movs	r0, #1
 8001048:	bd10      	pop	{r4, pc}
 800104a:	46c0      	nop			; (mov r8, r8)

0800104c <__aeabi_fcmple>:
 800104c:	b510      	push	{r4, lr}
 800104e:	f000 f8b1 	bl	80011b4 <__lesf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	dd01      	ble.n	800105a <__aeabi_fcmple+0xe>
 8001056:	2000      	movs	r0, #0
 8001058:	bd10      	pop	{r4, pc}
 800105a:	2001      	movs	r0, #1
 800105c:	bd10      	pop	{r4, pc}
 800105e:	46c0      	nop			; (mov r8, r8)

08001060 <__aeabi_fcmpgt>:
 8001060:	b510      	push	{r4, lr}
 8001062:	f000 f861 	bl	8001128 <__gesf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	dc01      	bgt.n	800106e <__aeabi_fcmpgt+0xe>
 800106a:	2000      	movs	r0, #0
 800106c:	bd10      	pop	{r4, pc}
 800106e:	2001      	movs	r0, #1
 8001070:	bd10      	pop	{r4, pc}
 8001072:	46c0      	nop			; (mov r8, r8)

08001074 <__aeabi_fcmpge>:
 8001074:	b510      	push	{r4, lr}
 8001076:	f000 f857 	bl	8001128 <__gesf2>
 800107a:	2800      	cmp	r0, #0
 800107c:	da01      	bge.n	8001082 <__aeabi_fcmpge+0xe>
 800107e:	2000      	movs	r0, #0
 8001080:	bd10      	pop	{r4, pc}
 8001082:	2001      	movs	r0, #1
 8001084:	bd10      	pop	{r4, pc}
 8001086:	46c0      	nop			; (mov r8, r8)

08001088 <__clzsi2>:
 8001088:	211c      	movs	r1, #28
 800108a:	2301      	movs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	4298      	cmp	r0, r3
 8001090:	d301      	bcc.n	8001096 <__clzsi2+0xe>
 8001092:	0c00      	lsrs	r0, r0, #16
 8001094:	3910      	subs	r1, #16
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	4298      	cmp	r0, r3
 800109a:	d301      	bcc.n	80010a0 <__clzsi2+0x18>
 800109c:	0a00      	lsrs	r0, r0, #8
 800109e:	3908      	subs	r1, #8
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	4298      	cmp	r0, r3
 80010a4:	d301      	bcc.n	80010aa <__clzsi2+0x22>
 80010a6:	0900      	lsrs	r0, r0, #4
 80010a8:	3904      	subs	r1, #4
 80010aa:	a202      	add	r2, pc, #8	; (adr r2, 80010b4 <__clzsi2+0x2c>)
 80010ac:	5c10      	ldrb	r0, [r2, r0]
 80010ae:	1840      	adds	r0, r0, r1
 80010b0:	4770      	bx	lr
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	02020304 	.word	0x02020304
 80010b8:	01010101 	.word	0x01010101
	...

080010c4 <__clzdi2>:
 80010c4:	b510      	push	{r4, lr}
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d103      	bne.n	80010d2 <__clzdi2+0xe>
 80010ca:	f7ff ffdd 	bl	8001088 <__clzsi2>
 80010ce:	3020      	adds	r0, #32
 80010d0:	e002      	b.n	80010d8 <__clzdi2+0x14>
 80010d2:	0008      	movs	r0, r1
 80010d4:	f7ff ffd8 	bl	8001088 <__clzsi2>
 80010d8:	bd10      	pop	{r4, pc}
 80010da:	46c0      	nop			; (mov r8, r8)

080010dc <__eqsf2>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	0042      	lsls	r2, r0, #1
 80010e0:	0245      	lsls	r5, r0, #9
 80010e2:	024e      	lsls	r6, r1, #9
 80010e4:	004c      	lsls	r4, r1, #1
 80010e6:	0fc3      	lsrs	r3, r0, #31
 80010e8:	0a6d      	lsrs	r5, r5, #9
 80010ea:	2001      	movs	r0, #1
 80010ec:	0e12      	lsrs	r2, r2, #24
 80010ee:	0a76      	lsrs	r6, r6, #9
 80010f0:	0e24      	lsrs	r4, r4, #24
 80010f2:	0fc9      	lsrs	r1, r1, #31
 80010f4:	2aff      	cmp	r2, #255	; 0xff
 80010f6:	d006      	beq.n	8001106 <__eqsf2+0x2a>
 80010f8:	2cff      	cmp	r4, #255	; 0xff
 80010fa:	d003      	beq.n	8001104 <__eqsf2+0x28>
 80010fc:	42a2      	cmp	r2, r4
 80010fe:	d101      	bne.n	8001104 <__eqsf2+0x28>
 8001100:	42b5      	cmp	r5, r6
 8001102:	d006      	beq.n	8001112 <__eqsf2+0x36>
 8001104:	bd70      	pop	{r4, r5, r6, pc}
 8001106:	2d00      	cmp	r5, #0
 8001108:	d1fc      	bne.n	8001104 <__eqsf2+0x28>
 800110a:	2cff      	cmp	r4, #255	; 0xff
 800110c:	d1fa      	bne.n	8001104 <__eqsf2+0x28>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d1f8      	bne.n	8001104 <__eqsf2+0x28>
 8001112:	428b      	cmp	r3, r1
 8001114:	d006      	beq.n	8001124 <__eqsf2+0x48>
 8001116:	2001      	movs	r0, #1
 8001118:	2a00      	cmp	r2, #0
 800111a:	d1f3      	bne.n	8001104 <__eqsf2+0x28>
 800111c:	0028      	movs	r0, r5
 800111e:	1e43      	subs	r3, r0, #1
 8001120:	4198      	sbcs	r0, r3
 8001122:	e7ef      	b.n	8001104 <__eqsf2+0x28>
 8001124:	2000      	movs	r0, #0
 8001126:	e7ed      	b.n	8001104 <__eqsf2+0x28>

08001128 <__gesf2>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	0042      	lsls	r2, r0, #1
 800112c:	0245      	lsls	r5, r0, #9
 800112e:	024e      	lsls	r6, r1, #9
 8001130:	004c      	lsls	r4, r1, #1
 8001132:	0fc3      	lsrs	r3, r0, #31
 8001134:	0a6d      	lsrs	r5, r5, #9
 8001136:	0e12      	lsrs	r2, r2, #24
 8001138:	0a76      	lsrs	r6, r6, #9
 800113a:	0e24      	lsrs	r4, r4, #24
 800113c:	0fc8      	lsrs	r0, r1, #31
 800113e:	2aff      	cmp	r2, #255	; 0xff
 8001140:	d01b      	beq.n	800117a <__gesf2+0x52>
 8001142:	2cff      	cmp	r4, #255	; 0xff
 8001144:	d00e      	beq.n	8001164 <__gesf2+0x3c>
 8001146:	2a00      	cmp	r2, #0
 8001148:	d11b      	bne.n	8001182 <__gesf2+0x5a>
 800114a:	2c00      	cmp	r4, #0
 800114c:	d101      	bne.n	8001152 <__gesf2+0x2a>
 800114e:	2e00      	cmp	r6, #0
 8001150:	d01c      	beq.n	800118c <__gesf2+0x64>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d00c      	beq.n	8001170 <__gesf2+0x48>
 8001156:	4283      	cmp	r3, r0
 8001158:	d01c      	beq.n	8001194 <__gesf2+0x6c>
 800115a:	2102      	movs	r1, #2
 800115c:	1e58      	subs	r0, r3, #1
 800115e:	4008      	ands	r0, r1
 8001160:	3801      	subs	r0, #1
 8001162:	bd70      	pop	{r4, r5, r6, pc}
 8001164:	2e00      	cmp	r6, #0
 8001166:	d122      	bne.n	80011ae <__gesf2+0x86>
 8001168:	2a00      	cmp	r2, #0
 800116a:	d1f4      	bne.n	8001156 <__gesf2+0x2e>
 800116c:	2d00      	cmp	r5, #0
 800116e:	d1f2      	bne.n	8001156 <__gesf2+0x2e>
 8001170:	2800      	cmp	r0, #0
 8001172:	d1f6      	bne.n	8001162 <__gesf2+0x3a>
 8001174:	2001      	movs	r0, #1
 8001176:	4240      	negs	r0, r0
 8001178:	e7f3      	b.n	8001162 <__gesf2+0x3a>
 800117a:	2d00      	cmp	r5, #0
 800117c:	d117      	bne.n	80011ae <__gesf2+0x86>
 800117e:	2cff      	cmp	r4, #255	; 0xff
 8001180:	d0f0      	beq.n	8001164 <__gesf2+0x3c>
 8001182:	2c00      	cmp	r4, #0
 8001184:	d1e7      	bne.n	8001156 <__gesf2+0x2e>
 8001186:	2e00      	cmp	r6, #0
 8001188:	d1e5      	bne.n	8001156 <__gesf2+0x2e>
 800118a:	e7e6      	b.n	800115a <__gesf2+0x32>
 800118c:	2000      	movs	r0, #0
 800118e:	2d00      	cmp	r5, #0
 8001190:	d0e7      	beq.n	8001162 <__gesf2+0x3a>
 8001192:	e7e2      	b.n	800115a <__gesf2+0x32>
 8001194:	42a2      	cmp	r2, r4
 8001196:	dc05      	bgt.n	80011a4 <__gesf2+0x7c>
 8001198:	dbea      	blt.n	8001170 <__gesf2+0x48>
 800119a:	42b5      	cmp	r5, r6
 800119c:	d802      	bhi.n	80011a4 <__gesf2+0x7c>
 800119e:	d3e7      	bcc.n	8001170 <__gesf2+0x48>
 80011a0:	2000      	movs	r0, #0
 80011a2:	e7de      	b.n	8001162 <__gesf2+0x3a>
 80011a4:	4243      	negs	r3, r0
 80011a6:	4158      	adcs	r0, r3
 80011a8:	0040      	lsls	r0, r0, #1
 80011aa:	3801      	subs	r0, #1
 80011ac:	e7d9      	b.n	8001162 <__gesf2+0x3a>
 80011ae:	2002      	movs	r0, #2
 80011b0:	4240      	negs	r0, r0
 80011b2:	e7d6      	b.n	8001162 <__gesf2+0x3a>

080011b4 <__lesf2>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	0042      	lsls	r2, r0, #1
 80011b8:	0245      	lsls	r5, r0, #9
 80011ba:	024e      	lsls	r6, r1, #9
 80011bc:	004c      	lsls	r4, r1, #1
 80011be:	0fc3      	lsrs	r3, r0, #31
 80011c0:	0a6d      	lsrs	r5, r5, #9
 80011c2:	0e12      	lsrs	r2, r2, #24
 80011c4:	0a76      	lsrs	r6, r6, #9
 80011c6:	0e24      	lsrs	r4, r4, #24
 80011c8:	0fc8      	lsrs	r0, r1, #31
 80011ca:	2aff      	cmp	r2, #255	; 0xff
 80011cc:	d00b      	beq.n	80011e6 <__lesf2+0x32>
 80011ce:	2cff      	cmp	r4, #255	; 0xff
 80011d0:	d00d      	beq.n	80011ee <__lesf2+0x3a>
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d11f      	bne.n	8001216 <__lesf2+0x62>
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	d116      	bne.n	8001208 <__lesf2+0x54>
 80011da:	2e00      	cmp	r6, #0
 80011dc:	d114      	bne.n	8001208 <__lesf2+0x54>
 80011de:	2000      	movs	r0, #0
 80011e0:	2d00      	cmp	r5, #0
 80011e2:	d010      	beq.n	8001206 <__lesf2+0x52>
 80011e4:	e009      	b.n	80011fa <__lesf2+0x46>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d10c      	bne.n	8001204 <__lesf2+0x50>
 80011ea:	2cff      	cmp	r4, #255	; 0xff
 80011ec:	d113      	bne.n	8001216 <__lesf2+0x62>
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d108      	bne.n	8001204 <__lesf2+0x50>
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d008      	beq.n	8001208 <__lesf2+0x54>
 80011f6:	4283      	cmp	r3, r0
 80011f8:	d012      	beq.n	8001220 <__lesf2+0x6c>
 80011fa:	2102      	movs	r1, #2
 80011fc:	1e58      	subs	r0, r3, #1
 80011fe:	4008      	ands	r0, r1
 8001200:	3801      	subs	r0, #1
 8001202:	e000      	b.n	8001206 <__lesf2+0x52>
 8001204:	2002      	movs	r0, #2
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	2d00      	cmp	r5, #0
 800120a:	d1f4      	bne.n	80011f6 <__lesf2+0x42>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1fa      	bne.n	8001206 <__lesf2+0x52>
 8001210:	2001      	movs	r0, #1
 8001212:	4240      	negs	r0, r0
 8001214:	e7f7      	b.n	8001206 <__lesf2+0x52>
 8001216:	2c00      	cmp	r4, #0
 8001218:	d1ed      	bne.n	80011f6 <__lesf2+0x42>
 800121a:	2e00      	cmp	r6, #0
 800121c:	d1eb      	bne.n	80011f6 <__lesf2+0x42>
 800121e:	e7ec      	b.n	80011fa <__lesf2+0x46>
 8001220:	42a2      	cmp	r2, r4
 8001222:	dc05      	bgt.n	8001230 <__lesf2+0x7c>
 8001224:	dbf2      	blt.n	800120c <__lesf2+0x58>
 8001226:	42b5      	cmp	r5, r6
 8001228:	d802      	bhi.n	8001230 <__lesf2+0x7c>
 800122a:	d3ef      	bcc.n	800120c <__lesf2+0x58>
 800122c:	2000      	movs	r0, #0
 800122e:	e7ea      	b.n	8001206 <__lesf2+0x52>
 8001230:	4243      	negs	r3, r0
 8001232:	4158      	adcs	r0, r3
 8001234:	0040      	lsls	r0, r0, #1
 8001236:	3801      	subs	r0, #1
 8001238:	e7e5      	b.n	8001206 <__lesf2+0x52>
 800123a:	46c0      	nop			; (mov r8, r8)

0800123c <TEA5767_write>:
extern char freq[50];
extern TIM_HandleTypeDef htim2;
extern I2C_HandleTypeDef hi2c2;
extern TEA5767_SettingsTypeDef tuner;

void TEA5767_write(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2,TEA5767_ADDR, txbuf, 4, HAL_MAX_DELAY);
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <TEA5767_write+0x20>)
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <TEA5767_write+0x24>)
 8001246:	2301      	movs	r3, #1
 8001248:	425b      	negs	r3, r3
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2304      	movs	r3, #4
 800124e:	21c0      	movs	r1, #192	; 0xc0
 8001250:	f000 ff9e 	bl	8002190 <HAL_I2C_Master_Transmit>
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000144 	.word	0x20000144
 8001260:	20000028 	.word	0x20000028

08001264 <TEA5767_read>:

void TEA5767_read(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(&hi2c2,TEA5767_ADDR, rxbuf, 4, HAL_MAX_DELAY);
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <TEA5767_read+0x20>)
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <TEA5767_read+0x24>)
 800126e:	2301      	movs	r3, #1
 8001270:	425b      	negs	r3, r3
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2304      	movs	r3, #4
 8001276:	21c0      	movs	r1, #192	; 0xc0
 8001278:	f001 f892 	bl	80023a0 <HAL_I2C_Master_Receive>
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	2000014c 	.word	0x2000014c
 8001288:	20000028 	.word	0x20000028

0800128c <TEA5767_SetFreq>:

void TEA5767_SetFreq(uint8_t hilo, float freq) {	// Ustawia czestotliwosc
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	0002      	movs	r2, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	701a      	strb	r2, [r3, #0]
	uint16_t div;

	if (hilo == 1)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d117      	bne.n	80012d2 <TEA5767_SetFreq+0x46>
		div = (freq * 1000000 + 225000) / 8192;
 80012a2:	4941      	ldr	r1, [pc, #260]	; (80013a8 <TEA5767_SetFreq+0x11c>)
 80012a4:	6838      	ldr	r0, [r7, #0]
 80012a6:	f7ff fba7 	bl	80009f8 <__aeabi_fmul>
 80012aa:	1c03      	adds	r3, r0, #0
 80012ac:	493f      	ldr	r1, [pc, #252]	; (80013ac <TEA5767_SetFreq+0x120>)
 80012ae:	1c18      	adds	r0, r3, #0
 80012b0:	f7ff f8e8 	bl	8000484 <__aeabi_fadd>
 80012b4:	1c03      	adds	r3, r0, #0
 80012b6:	218c      	movs	r1, #140	; 0x8c
 80012b8:	05c9      	lsls	r1, r1, #23
 80012ba:	1c18      	adds	r0, r3, #0
 80012bc:	f7ff fa82 	bl	80007c4 <__aeabi_fdiv>
 80012c0:	1c03      	adds	r3, r0, #0
 80012c2:	220e      	movs	r2, #14
 80012c4:	18bc      	adds	r4, r7, r2
 80012c6:	1c18      	adds	r0, r3, #0
 80012c8:	f7fe fff8 	bl	80002bc <__aeabi_f2uiz>
 80012cc:	0003      	movs	r3, r0
 80012ce:	8023      	strh	r3, [r4, #0]
 80012d0:	e016      	b.n	8001300 <TEA5767_SetFreq+0x74>
	else
		div = (freq * 1000000 - 225000) / 8192;
 80012d2:	4935      	ldr	r1, [pc, #212]	; (80013a8 <TEA5767_SetFreq+0x11c>)
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f7ff fb8f 	bl	80009f8 <__aeabi_fmul>
 80012da:	1c03      	adds	r3, r0, #0
 80012dc:	4933      	ldr	r1, [pc, #204]	; (80013ac <TEA5767_SetFreq+0x120>)
 80012de:	1c18      	adds	r0, r3, #0
 80012e0:	f7ff fcd8 	bl	8000c94 <__aeabi_fsub>
 80012e4:	1c03      	adds	r3, r0, #0
 80012e6:	218c      	movs	r1, #140	; 0x8c
 80012e8:	05c9      	lsls	r1, r1, #23
 80012ea:	1c18      	adds	r0, r3, #0
 80012ec:	f7ff fa6a 	bl	80007c4 <__aeabi_fdiv>
 80012f0:	1c03      	adds	r3, r0, #0
 80012f2:	220e      	movs	r2, #14
 80012f4:	18bc      	adds	r4, r7, r2
 80012f6:	1c18      	adds	r0, r3, #0
 80012f8:	f7fe ffe0 	bl	80002bc <__aeabi_f2uiz>
 80012fc:	0003      	movs	r3, r0
 80012fe:	8023      	strh	r3, [r4, #0]

	txbuf[0] = (div >> 8) & 0x3f; 											// and sprawia, ze zapisywane są tylko bity od 5 do 0 odpowiedzialne za PLL
 8001300:	230e      	movs	r3, #14
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	223f      	movs	r2, #63	; 0x3f
 800130e:	4013      	ands	r3, r2
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001314:	701a      	strb	r2, [r3, #0]
	if (tuner.Mute) txbuf[0] |= TEA5767_MUTE;								// x|=3 to równoważnik x = x|3
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <TEA5767_SetFreq+0x128>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <TEA5767_SetFreq+0xa2>
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	4252      	negs	r2, r2
 8001326:	4313      	orrs	r3, r2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <TEA5767_SetFreq+0x124>)
 800132c:	701a      	strb	r2, [r3, #0]
	txbuf[1] = div & 0xff;													// caly drugi bit to PLL (zapis czestotliwosci)
 800132e:	230e      	movs	r3, #14
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001338:	705a      	strb	r2, [r3, #1]
	txbuf[2] = (hilo == 0) ? TEA5767_LO_INJECTION : TEA5767_HI_INJECTION;	// ? operator działa jak if, komenda warunkuje sposob zmiany czestotliwosc na kanal
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <TEA5767_SetFreq+0xba>
 8001342:	2200      	movs	r2, #0
 8001344:	e000      	b.n	8001348 <TEA5767_SetFreq+0xbc>
 8001346:	2210      	movs	r2, #16
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <TEA5767_SetFreq+0x124>)
 800134a:	709a      	strb	r2, [r3, #2]
	txbuf[3] = TEA5767_XTAL;												// 4 bajkt mowi o czestotliwosci zegara
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <TEA5767_SetFreq+0x124>)
 800134e:	2210      	movs	r2, #16
 8001350:	70da      	strb	r2, [r3, #3]
	if (tuner.Band) txbuf[3] |= TEA5767_JAPAN_BAND;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <TEA5767_SetFreq+0x128>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <TEA5767_SetFreq+0xdc>
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <TEA5767_SetFreq+0x124>)
 800135c:	78db      	ldrb	r3, [r3, #3]
 800135e:	2220      	movs	r2, #32
 8001360:	4313      	orrs	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001366:	70da      	strb	r2, [r3, #3]
	if (tuner.HCC)  txbuf[3] |= TEA5767_HCC;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <TEA5767_SetFreq+0x128>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <TEA5767_SetFreq+0xf2>
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001372:	78db      	ldrb	r3, [r3, #3]
 8001374:	2204      	movs	r2, #4
 8001376:	4313      	orrs	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <TEA5767_SetFreq+0x124>)
 800137c:	70da      	strb	r2, [r3, #3]
	if (tuner.SNC)  txbuf[3] |= TEA5767_SNC;
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <TEA5767_SetFreq+0x128>)
 8001380:	795b      	ldrb	r3, [r3, #5]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <TEA5767_SetFreq+0x108>
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	2202      	movs	r2, #2
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001392:	70da      	strb	r2, [r3, #3]
	txbuf[4] = 0x00; 														// piaty bajt zawsze jest ten sam
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <TEA5767_SetFreq+0x124>)
 8001396:	2200      	movs	r2, #0
 8001398:	711a      	strb	r2, [r3, #4]

	TEA5767_write();
 800139a:	f7ff ff4f 	bl	800123c <TEA5767_write>
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b005      	add	sp, #20
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	49742400 	.word	0x49742400
 80013ac:	485bba00 	.word	0x485bba00
 80013b0:	20000144 	.word	0x20000144
 80013b4:	20000154 	.word	0x20000154

080013b8 <TEA5767_get_ADC>:

uint8_t TEA5767_get_ADC(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	return (rxbuf[3] & 0xf0) >> 4;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <TEA5767_get_ADC+0x14>)
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	2000014c 	.word	0x2000014c

080013d0 <TEA5767_hilo_optimal>:

uint8_t TEA5767_hilo_optimal(float freq) { 									//ustawia optymalne HILO dla czestotliwosci
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint8_t ADC_lo, ADC_hi;

	TEA5767_SetFreq(1,(freq + 450000) / 1000000.0);							// strojenie F=freq+450kHz z hilo high
 80013d8:	491f      	ldr	r1, [pc, #124]	; (8001458 <TEA5767_hilo_optimal+0x88>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f852 	bl	8000484 <__aeabi_fadd>
 80013e0:	1c03      	adds	r3, r0, #0
 80013e2:	491e      	ldr	r1, [pc, #120]	; (800145c <TEA5767_hilo_optimal+0x8c>)
 80013e4:	1c18      	adds	r0, r3, #0
 80013e6:	f7ff f9ed 	bl	80007c4 <__aeabi_fdiv>
 80013ea:	1c03      	adds	r3, r0, #0
 80013ec:	1c19      	adds	r1, r3, #0
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff ff4c 	bl	800128c <TEA5767_SetFreq>
	delay_us(30000); 														// przynajmniej 27ms
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <TEA5767_hilo_optimal+0x90>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f854 	bl	80014a4 <delay_us>
	TEA5767_read();
 80013fc:	f7ff ff32 	bl	8001264 <TEA5767_read>
	ADC_hi = TEA5767_get_ADC();
 8001400:	250f      	movs	r5, #15
 8001402:	197c      	adds	r4, r7, r5
 8001404:	f7ff ffd8 	bl	80013b8 <TEA5767_get_ADC>
 8001408:	0003      	movs	r3, r0
 800140a:	7023      	strb	r3, [r4, #0]

	TEA5767_SetFreq(1,(freq - 450000) / 1000000.0);							// strojenie F=freq-450kHz z HILO low
 800140c:	4912      	ldr	r1, [pc, #72]	; (8001458 <TEA5767_hilo_optimal+0x88>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fc40 	bl	8000c94 <__aeabi_fsub>
 8001414:	1c03      	adds	r3, r0, #0
 8001416:	4911      	ldr	r1, [pc, #68]	; (800145c <TEA5767_hilo_optimal+0x8c>)
 8001418:	1c18      	adds	r0, r3, #0
 800141a:	f7ff f9d3 	bl	80007c4 <__aeabi_fdiv>
 800141e:	1c03      	adds	r3, r0, #0
 8001420:	1c19      	adds	r1, r3, #0
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff ff32 	bl	800128c <TEA5767_SetFreq>
	delay_us(30000); 														// przynajmniej 27ms
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <TEA5767_hilo_optimal+0x90>)
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f83a 	bl	80014a4 <delay_us>
	TEA5767_read();
 8001430:	f7ff ff18 	bl	8001264 <TEA5767_read>
	ADC_lo = TEA5767_get_ADC();
 8001434:	260e      	movs	r6, #14
 8001436:	19bc      	adds	r4, r7, r6
 8001438:	f7ff ffbe 	bl	80013b8 <TEA5767_get_ADC>
 800143c:	0003      	movs	r3, r0
 800143e:	7023      	strb	r3, [r4, #0]

	// Jesli (LevelHigh < LevelLow) to HILO=1, inaczej HILO=0
	return (ADC_hi < ADC_lo) ? 1 : 0;
 8001440:	197a      	adds	r2, r7, r5
 8001442:	19bb      	adds	r3, r7, r6
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	419b      	sbcs	r3, r3
 800144c:	425b      	negs	r3, r3
 800144e:	b2db      	uxtb	r3, r3
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b005      	add	sp, #20
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	48dbba00 	.word	0x48dbba00
 800145c:	49742400 	.word	0x49742400
 8001460:	00007530 	.word	0x00007530

08001464 <TEA5767_set_frequency>:

void TEA5767_set_frequency(float freq) {	//wykrywa optymalne HILO na podstawie czestotliwosci i ustawia ją
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	tuner.HILO = TEA5767_hilo_optimal(freq * 1000000.0);
 800146c:	490b      	ldr	r1, [pc, #44]	; (800149c <TEA5767_set_frequency+0x38>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fac2 	bl	80009f8 <__aeabi_fmul>
 8001474:	1c03      	adds	r3, r0, #0
 8001476:	1c18      	adds	r0, r3, #0
 8001478:	f7ff ffaa 	bl	80013d0 <TEA5767_hilo_optimal>
 800147c:	0003      	movs	r3, r0
 800147e:	001a      	movs	r2, r3
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <TEA5767_set_frequency+0x3c>)
 8001482:	701a      	strb	r2, [r3, #0]
	TEA5767_SetFreq(tuner.HILO,freq);
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <TEA5767_set_frequency+0x3c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	1c11      	adds	r1, r2, #0
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fefd 	bl	800128c <TEA5767_SetFreq>
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	49742400 	.word	0x49742400
 80014a0:	20000154 	.word	0x20000154

080014a4 <delay_us>:
			TEA5767_auto_scan(scan_dir);
		}
}

void delay_us (uint32_t us)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <delay_us+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <delay_us+0x28>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8f9      	bhi.n	80014b6 <delay_us+0x12>
}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000007c 	.word	0x2000007c

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 fadc 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f824 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f000 f952 	bl	8001784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014e0:	f000 f920 	bl	8001724 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80014e4:	f000 f88a 	bl	80015fc <MX_I2C2_Init>
  MX_TIM2_Init();
 80014e8:	f000 f8c8 	bl	800167c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tuner.Band = TEA5767_EUROPE_BAND;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <main+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	70da      	strb	r2, [r3, #3]
  tuner.HCC  = TEA5767_HCC;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <main+0x4c>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	711a      	strb	r2, [r3, #4]
  tuner.SNC  = TEA5767_SNC;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <main+0x4c>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	715a      	strb	r2, [r3, #5]
  tuner.HILO = TEA5767_HI_INJECTION;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <main+0x4c>)
 8001500:	2210      	movs	r2, #16
 8001502:	701a      	strb	r2, [r3, #0]
  tuner.Mono = TEA5767_STEREO;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <main+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	709a      	strb	r2, [r3, #2]
  tuner.Mute = 0;
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <main+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	705a      	strb	r2, [r3, #1]

  TEA5767_set_frequency(103.7);
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <main+0x50>)
 8001512:	1c18      	adds	r0, r3, #0
 8001514:	f7ff ffa6 	bl	8001464 <TEA5767_set_frequency>
  //TEA5767_scanning(TEA5767_SCAN_UP);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001518:	e7fe      	b.n	8001518 <main+0x48>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	20000154 	.word	0x20000154
 8001520:	42cf6666 	.word	0x42cf6666

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b09f      	sub	sp, #124	; 0x7c
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	2440      	movs	r4, #64	; 0x40
 800152c:	193b      	adds	r3, r7, r4
 800152e:	0018      	movs	r0, r3
 8001530:	2338      	movs	r3, #56	; 0x38
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f003 fbb5 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153a:	232c      	movs	r3, #44	; 0x2c
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	0018      	movs	r0, r3
 8001540:	2314      	movs	r3, #20
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f003 fbad 	bl	8004ca4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	0018      	movs	r0, r3
 800154e:	2328      	movs	r3, #40	; 0x28
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f003 fba6 	bl	8004ca4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <SystemClock_Config+0xd4>)
 800155e:	401a      	ands	r2, r3
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <SystemClock_Config+0xd0>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0109      	lsls	r1, r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800156a:	0021      	movs	r1, r4
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2210      	movs	r2, #16
 8001570:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2201      	movs	r2, #1
 8001576:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	22a0      	movs	r2, #160	; 0xa0
 8001582:	0212      	lsls	r2, r2, #8
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	187b      	adds	r3, r7, r1
 800158e:	0018      	movs	r0, r3
 8001590:	f001 fb5c 	bl	8002c4c <HAL_RCC_OscConfig>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001598:	f000 f964 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	220f      	movs	r2, #15
 80015a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2100      	movs	r1, #0
 80015c0:	0018      	movs	r0, r3
 80015c2:	f001 ff17 	bl	80033f4 <HAL_RCC_ClockConfig>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ca:	f000 f94b 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	0018      	movs	r0, r3
 80015de:	f002 f92d 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015e6:	f000 f93d 	bl	8001864 <Error_Handler>
  }
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b01f      	add	sp, #124	; 0x7c
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40007000 	.word	0x40007000
 80015f8:	ffffe7ff 	.word	0xffffe7ff

080015fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_I2C2_Init+0x78>)
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <MX_I2C2_Init+0x7c>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C2_Init+0x78>)
 8001608:	22e1      	movs	r2, #225	; 0xe1
 800160a:	00d2      	lsls	r2, r2, #3
 800160c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_I2C2_Init+0x78>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_I2C2_Init+0x78>)
 8001616:	2201      	movs	r2, #1
 8001618:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_I2C2_Init+0x78>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_I2C2_Init+0x78>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_I2C2_Init+0x78>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C2_Init+0x78>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <MX_I2C2_Init+0x78>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_I2C2_Init+0x78>)
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fd12 	bl	8002064 <HAL_I2C_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 f90e 	bl	8001864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_I2C2_Init+0x78>)
 800164a:	2100      	movs	r1, #0
 800164c:	0018      	movs	r0, r3
 800164e:	f001 fa65 	bl	8002b1c <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001656:	f000 f905 	bl	8001864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_I2C2_Init+0x78>)
 800165c:	2100      	movs	r1, #0
 800165e:	0018      	movs	r0, r3
 8001660:	f001 faa8 	bl	8002bb4 <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 f8fc 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20000028 	.word	0x20000028
 8001678:	40005800 	.word	0x40005800

0800167c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	2308      	movs	r3, #8
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	0018      	movs	r0, r3
 8001688:	2310      	movs	r3, #16
 800168a:	001a      	movs	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f003 fb09 	bl	8004ca4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	003b      	movs	r3, r7
 8001694:	0018      	movs	r0, r3
 8001696:	2308      	movs	r3, #8
 8001698:	001a      	movs	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	f003 fb02 	bl	8004ca4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_TIM2_Init+0xa0>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	05d2      	lsls	r2, r2, #23
 80016a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_TIM2_Init+0xa0>)
 80016aa:	2247      	movs	r2, #71	; 0x47
 80016ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM2_Init+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM2_Init+0xa0>)
 80016b6:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <MX_TIM2_Init+0xa4>)
 80016b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM2_Init+0xa0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM2_Init+0xa0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM2_Init+0xa0>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f002 fa55 	bl	8003b78 <HAL_TIM_Base_Init>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016d2:	f000 f8c7 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	2108      	movs	r1, #8
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	0152      	lsls	r2, r2, #5
 80016de:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016e0:	187a      	adds	r2, r7, r1
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_TIM2_Init+0xa0>)
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f002 fb6e 	bl	8003dc8 <HAL_TIM_ConfigClockSource>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016f0:	f000 f8b8 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	003b      	movs	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	003b      	movs	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001700:	003a      	movs	r2, r7
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_TIM2_Init+0xa0>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f002 fd52 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001710:	f000 f8a8 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b006      	add	sp, #24
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000007c 	.word	0x2000007c
 8001720:	0000ffff 	.word	0x0000ffff

08001724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USART2_UART_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <MX_USART2_UART_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001730:	22e1      	movs	r2, #225	; 0xe1
 8001732:	0252      	lsls	r2, r2, #9
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_USART2_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_USART2_UART_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USART2_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <MX_USART2_UART_Init+0x58>)
 8001768:	0018      	movs	r0, r3
 800176a:	f002 fd7f 	bl	800426c <HAL_UART_Init>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f877 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200000bc 	.word	0x200000bc
 8001780:	40004400 	.word	0x40004400

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	2414      	movs	r4, #20
 800178c:	193b      	adds	r3, r7, r4
 800178e:	0018      	movs	r0, r3
 8001790:	2314      	movs	r3, #20
 8001792:	001a      	movs	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	f003 fa85 	bl	8004ca4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <MX_GPIO_Init+0xd8>)
 800179c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <MX_GPIO_Init+0xd8>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xd8>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_GPIO_Init+0xd8>)
 80017b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <MX_GPIO_Init+0xd8>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	430a      	orrs	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <MX_GPIO_Init+0xd8>)
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_GPIO_Init+0xd8>)
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_GPIO_Init+0xd8>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_GPIO_Init+0xd8>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_GPIO_Init+0xd8>)
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_GPIO_Init+0xd8>)
 80017e8:	2102      	movs	r1, #2
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_GPIO_Init+0xd8>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	2202      	movs	r2, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017fa:	23a0      	movs	r3, #160	; 0xa0
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	2200      	movs	r2, #0
 8001800:	2120      	movs	r1, #32
 8001802:	0018      	movs	r0, r3
 8001804:	f000 fc10 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001808:	193b      	adds	r3, r7, r4
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0192      	lsls	r2, r2, #6
 800180e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001810:	193b      	adds	r3, r7, r4
 8001812:	2284      	movs	r2, #132	; 0x84
 8001814:	0392      	lsls	r2, r2, #14
 8001816:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	193b      	adds	r3, r7, r4
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181e:	193b      	adds	r3, r7, r4
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <MX_GPIO_Init+0xdc>)
 8001822:	0019      	movs	r1, r3
 8001824:	0010      	movs	r0, r2
 8001826:	f000 fa81 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800182a:	0021      	movs	r1, r4
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2220      	movs	r2, #32
 8001830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2201      	movs	r2, #1
 8001836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001844:	187a      	adds	r2, r7, r1
 8001846:	23a0      	movs	r3, #160	; 0xa0
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f000 fa6d 	bl	8001d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b00b      	add	sp, #44	; 0x2c
 8001858:	bd90      	pop	{r4, r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	50000800 	.word	0x50000800

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_MspInit+0x24>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x24>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_MspInit+0x24>)
 8001882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_MspInit+0x24>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0549      	lsls	r1, r1, #21
 800188a:	430a      	orrs	r2, r1
 800188c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	240c      	movs	r4, #12
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	0018      	movs	r0, r3
 80018a6:	2314      	movs	r3, #20
 80018a8:	001a      	movs	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	f003 f9fa 	bl	8004ca4 <memset>
  if(hi2c->Instance==I2C2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_I2C_MspInit+0x80>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d129      	bne.n	800190e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_I2C_MspInit+0x84>)
 80018bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_I2C_MspInit+0x84>)
 80018c0:	2102      	movs	r1, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_I2C_MspInit+0x84>)
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	22c0      	movs	r2, #192	; 0xc0
 80018d6:	01d2      	lsls	r2, r2, #7
 80018d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018da:	0021      	movs	r1, r4
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2212      	movs	r2, #18
 80018e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2203      	movs	r2, #3
 80018ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2205      	movs	r2, #5
 80018f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_I2C_MspInit+0x88>)
 80018f8:	0019      	movs	r1, r3
 80018fa:	0010      	movs	r0, r2
 80018fc:	f000 fa16 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_I2C_MspInit+0x84>)
 8001902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_I2C_MspInit+0x84>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	03c9      	lsls	r1, r1, #15
 800190a:	430a      	orrs	r2, r1
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b009      	add	sp, #36	; 0x24
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40005800 	.word	0x40005800
 800191c:	40021000 	.word	0x40021000
 8001920:	50000400 	.word	0x50000400

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	05db      	lsls	r3, r3, #23
 8001934:	429a      	cmp	r2, r3
 8001936:	d10d      	bne.n	8001954 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 800193a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_TIM_Base_MspInit+0x38>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	200f      	movs	r0, #15
 800194a:	f000 f9bd 	bl	8001cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f9cf 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	240c      	movs	r4, #12
 800196a:	193b      	adds	r3, r7, r4
 800196c:	0018      	movs	r0, r3
 800196e:	2314      	movs	r3, #20
 8001970:	001a      	movs	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	f003 f996 	bl	8004ca4 <memset>
  if(huart->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x80>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d129      	bne.n	80019d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_UART_MspInit+0x84>)
 8001984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_UART_MspInit+0x84>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0289      	lsls	r1, r1, #10
 800198c:	430a      	orrs	r2, r1
 800198e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_UART_MspInit+0x84>)
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_UART_MspInit+0x84>)
 8001996:	2101      	movs	r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_UART_MspInit+0x84>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a8:	0021      	movs	r1, r4
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	220c      	movs	r2, #12
 80019ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2202      	movs	r2, #2
 80019b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2203      	movs	r2, #3
 80019c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2204      	movs	r2, #4
 80019c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	187a      	adds	r2, r7, r1
 80019ca:	23a0      	movs	r3, #160	; 0xa0
 80019cc:	05db      	lsls	r3, r3, #23
 80019ce:	0011      	movs	r1, r2
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f9ab 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b009      	add	sp, #36	; 0x24
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40004400 	.word	0x40004400
 80019e4:	40021000 	.word	0x40021000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f894 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <TIM2_IRQHandler+0x14>)
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 f8ea 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	2000007c 	.word	0x2000007c

08001a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a3c:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a40:	f7ff fff6 	bl	8001a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	; (8001a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <LoopForever+0xe>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	; (8001a88 <LoopForever+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 f923 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fd2f 	bl	80014d0 <main>

08001a72 <LoopForever>:

LoopForever:
    b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
   ldr   r0, =_estack
 8001a74:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a80:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8001a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a88:	20000160 	.word	0x20000160

08001a8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_COMP_IRQHandler>
	...

08001a90 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_Init+0x3c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Init+0x3c>)
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f811 	bl	8001ad0 <HAL_InitTick>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e001      	b.n	8001abe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aba:	f7ff fed9 	bl	8001870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_InitTick+0x5c>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_InitTick+0x60>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	23fa      	movs	r3, #250	; 0xfa
 8001ae4:	0098      	lsls	r0, r3, #2
 8001ae6:	f7fe fb0f 	bl	8000108 <__udivsi3>
 8001aea:	0003      	movs	r3, r0
 8001aec:	0019      	movs	r1, r3
 8001aee:	0020      	movs	r0, r4
 8001af0:	f7fe fb0a 	bl	8000108 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f90b 	bl	8001d12 <HAL_SYSTICK_Config>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e00f      	b.n	8001b24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d80b      	bhi.n	8001b22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	425b      	negs	r3, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f8d8 	bl	8001cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_InitTick+0x64>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b003      	add	sp, #12
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	001a      	movs	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	18d2      	adds	r2, r2, r3
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000008 	.word	0x20000008
 8001b58:	2000015c 	.word	0x2000015c

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000015c 	.word	0x2000015c

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	0002      	movs	r2, r0
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b7f      	cmp	r3, #127	; 0x7f
 8001b82:	d809      	bhi.n	8001b98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	231f      	movs	r3, #31
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_EnableIRQ+0x30>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	4091      	lsls	r1, r2
 8001b94:	000a      	movs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
  }
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	0002      	movs	r2, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb8:	d828      	bhi.n	8001c0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bba:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <__NVIC_SetPriority+0xd4>)
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	33c0      	adds	r3, #192	; 0xc0
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	589b      	ldr	r3, [r3, r2]
 8001bca:	1dfa      	adds	r2, r7, #7
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	0011      	movs	r1, r2
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	21ff      	movs	r1, #255	; 0xff
 8001bd8:	4091      	lsls	r1, r2
 8001bda:	000a      	movs	r2, r1
 8001bdc:	43d2      	mvns	r2, r2
 8001bde:	401a      	ands	r2, r3
 8001be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	22ff      	movs	r2, #255	; 0xff
 8001be8:	401a      	ands	r2, r3
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	4003      	ands	r3, r0
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf8:	481f      	ldr	r0, [pc, #124]	; (8001c78 <__NVIC_SetPriority+0xd4>)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	430a      	orrs	r2, r1
 8001c04:	33c0      	adds	r3, #192	; 0xc0
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c0a:	e031      	b.n	8001c70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <__NVIC_SetPriority+0xd8>)
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	0019      	movs	r1, r3
 8001c14:	230f      	movs	r3, #15
 8001c16:	400b      	ands	r3, r1
 8001c18:	3b08      	subs	r3, #8
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	18d3      	adds	r3, r2, r3
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1dfa      	adds	r2, r7, #7
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	0011      	movs	r1, r2
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	400a      	ands	r2, r1
 8001c30:	00d2      	lsls	r2, r2, #3
 8001c32:	21ff      	movs	r1, #255	; 0xff
 8001c34:	4091      	lsls	r1, r2
 8001c36:	000a      	movs	r2, r1
 8001c38:	43d2      	mvns	r2, r2
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	401a      	ands	r2, r3
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	4003      	ands	r3, r0
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <__NVIC_SetPriority+0xd8>)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	001c      	movs	r4, r3
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	4023      	ands	r3, r4
 8001c60:	3b08      	subs	r3, #8
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	430a      	orrs	r2, r1
 8001c66:	3306      	adds	r3, #6
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	18c3      	adds	r3, r0, r3
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b003      	add	sp, #12
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	045b      	lsls	r3, r3, #17
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d301      	bcc.n	8001c98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c94:	2301      	movs	r3, #1
 8001c96:	e010      	b.n	8001cba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <SysTick_Config+0x44>)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff ff7c 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x44>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x44>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	1c02      	adds	r2, r0, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff ff33 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ffaf 	bl	8001c80 <SysTick_Config>
 8001d22:	0003      	movs	r3, r0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d42:	e155      	b.n	8001ff0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4091      	lsls	r1, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <HAL_GPIO_Init+0x30>
 8001d5a:	e146      	b.n	8001fea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	58d3      	ldr	r3, [r2, r3]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4013      	ands	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2107      	movs	r1, #7
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	401a      	ands	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_GPIO_Init+0x17c>
 8001ea6:	e0a0      	b.n	8001fea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eac:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb4:	4a55      	ldr	r2, [pc, #340]	; (800200c <HAL_GPIO_Init+0x2e0>)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	589b      	ldr	r3, [r3, r2]
 8001ec0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	0013      	movs	r3, r2
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	23a0      	movs	r3, #160	; 0xa0
 8001edc:	05db      	lsls	r3, r3, #23
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x1f6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_GPIO_Init+0x2e4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x1f2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a48      	ldr	r2, [pc, #288]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x1ea>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a47      	ldr	r2, [pc, #284]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x1e6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a46      	ldr	r2, [pc, #280]	; (8002020 <HAL_GPIO_Init+0x2f4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x1e2>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f22:	2300      	movs	r3, #0
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	2103      	movs	r1, #3
 8001f28:	400a      	ands	r2, r1
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2e0>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	035b      	lsls	r3, r3, #13
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43da      	mvns	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	039b      	lsls	r3, r3, #14
 8001f84:	4013      	ands	r3, r2
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	025b      	lsls	r3, r3, #9
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x2f8>)
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	40da      	lsrs	r2, r3
 8001ff8:	1e13      	subs	r3, r2, #0
 8001ffa:	d000      	beq.n	8001ffe <HAL_GPIO_Init+0x2d2>
 8001ffc:	e6a2      	b.n	8001d44 <HAL_GPIO_Init+0x18>
  }
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b006      	add	sp, #24
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	50000400 	.word	0x50000400
 8002014:	50000800 	.word	0x50000800
 8002018:	50000c00 	.word	0x50000c00
 800201c:	50001000 	.word	0x50001000
 8002020:	50001c00 	.word	0x50001c00
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	0008      	movs	r0, r1
 8002032:	0011      	movs	r1, r2
 8002034:	1cbb      	adds	r3, r7, #2
 8002036:	1c02      	adds	r2, r0, #0
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	1c7b      	adds	r3, r7, #1
 800203c:	1c0a      	adds	r2, r1, #0
 800203e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002040:	1c7b      	adds	r3, r7, #1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	1cbb      	adds	r3, r7, #2
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002052:	1cbb      	adds	r3, r7, #2
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e082      	b.n	800217c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2241      	movs	r2, #65	; 0x41
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff fc03 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2124      	movs	r1, #36	; 0x24
 8002098:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4934      	ldr	r1, [pc, #208]	; (8002184 <HAL_I2C_Init+0x120>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4931      	ldr	r1, [pc, #196]	; (8002188 <HAL_I2C_Init+0x124>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0209      	lsls	r1, r1, #8
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e007      	b.n	80020f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2184      	movs	r1, #132	; 0x84
 80020ec:	0209      	lsls	r1, r1, #8
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d104      	bne.n	8002104 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	491f      	ldr	r1, [pc, #124]	; (800218c <HAL_I2C_Init+0x128>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_I2C_Init+0x124>)
 8002120:	400a      	ands	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	431a      	orrs	r2, r3
 800212e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69d9      	ldr	r1, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2241      	movs	r2, #65	; 0x41
 8002168:	2120      	movs	r1, #32
 800216a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2242      	movs	r2, #66	; 0x42
 8002176:	2100      	movs	r1, #0
 8002178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}
 8002184:	f0ffffff 	.word	0xf0ffffff
 8002188:	ffff7fff 	.word	0xffff7fff
 800218c:	02008000 	.word	0x02008000

08002190 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	0008      	movs	r0, r1
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	0019      	movs	r1, r3
 800219e:	230a      	movs	r3, #10
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	1c02      	adds	r2, r0, #0
 80021a4:	801a      	strh	r2, [r3, #0]
 80021a6:	2308      	movs	r3, #8
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	1c0a      	adds	r2, r1, #0
 80021ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2241      	movs	r2, #65	; 0x41
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d000      	beq.n	80021bc <HAL_I2C_Master_Transmit+0x2c>
 80021ba:	e0e7      	b.n	800238c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Master_Transmit+0x3a>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0e1      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d2:	f7ff fcc3 	bl	8001b5c <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	0219      	lsls	r1, r3, #8
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	f000 fa04 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	2121      	movs	r1, #33	; 0x21
 80021fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2242      	movs	r2, #66	; 0x42
 8002200:	2110      	movs	r1, #16
 8002202:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2208      	movs	r2, #8
 8002214:	18ba      	adds	r2, r7, r2
 8002216:	8812      	ldrh	r2, [r2, #0]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d911      	bls.n	800224e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	b2da      	uxtb	r2, r3
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	045c      	lsls	r4, r3, #17
 800223a:	230a      	movs	r3, #10
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	8819      	ldrh	r1, [r3, #0]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	4b55      	ldr	r3, [pc, #340]	; (8002398 <HAL_I2C_Master_Transmit+0x208>)
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	0023      	movs	r3, r4
 8002248:	f000 fc2e 	bl	8002aa8 <I2C_TransferConfig>
 800224c:	e075      	b.n	800233a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	b2da      	uxtb	r2, r3
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	049c      	lsls	r4, r3, #18
 8002262:	230a      	movs	r3, #10
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	8819      	ldrh	r1, [r3, #0]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_I2C_Master_Transmit+0x208>)
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	0023      	movs	r3, r4
 8002270:	f000 fc1a 	bl	8002aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002274:	e061      	b.n	800233a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fa07 	bl	8002690 <I2C_WaitOnTXISFlagUntilTimeout>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e081      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03a      	beq.n	800233a <HAL_I2C_Master_Transmit+0x1aa>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d136      	bne.n	800233a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	0013      	movs	r3, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	f000 f98b 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e053      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2bff      	cmp	r3, #255	; 0xff
 80022ee:	d911      	bls.n	8002314 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	22ff      	movs	r2, #255	; 0xff
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	045c      	lsls	r4, r3, #17
 8002300:	230a      	movs	r3, #10
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	8819      	ldrh	r1, [r3, #0]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	0023      	movs	r3, r4
 800230e:	f000 fbcb 	bl	8002aa8 <I2C_TransferConfig>
 8002312:	e012      	b.n	800233a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	b2da      	uxtb	r2, r3
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	049c      	lsls	r4, r3, #18
 8002328:	230a      	movs	r3, #10
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	8819      	ldrh	r1, [r3, #0]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	2300      	movs	r3, #0
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	0023      	movs	r3, r4
 8002336:	f000 fbb7 	bl	8002aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d198      	bne.n	8002276 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f9e6 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e01a      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2220      	movs	r2, #32
 800235e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	490c      	ldr	r1, [pc, #48]	; (800239c <HAL_I2C_Master_Transmit+0x20c>)
 800236c:	400a      	ands	r2, r1
 800236e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2241      	movs	r2, #65	; 0x41
 8002374:	2120      	movs	r1, #32
 8002376:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2242      	movs	r2, #66	; 0x42
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b007      	add	sp, #28
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	80002000 	.word	0x80002000
 800239c:	fe00e800 	.word	0xfe00e800

080023a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	0008      	movs	r0, r1
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	0019      	movs	r1, r3
 80023ae:	230a      	movs	r3, #10
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	1c02      	adds	r2, r0, #0
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	2308      	movs	r3, #8
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	5c9b      	ldrb	r3, [r3, r2]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d000      	beq.n	80023cc <HAL_I2C_Master_Receive+0x2c>
 80023ca:	e0e8      	b.n	800259e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2240      	movs	r2, #64	; 0x40
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Master_Receive+0x3a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0e2      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e2:	f7ff fbbb 	bl	8001b5c <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	0219      	lsls	r1, r3, #8
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2319      	movs	r3, #25
 80023f6:	2201      	movs	r2, #1
 80023f8:	f000 f8fc 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cd      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2241      	movs	r2, #65	; 0x41
 8002408:	2122      	movs	r1, #34	; 0x22
 800240a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2242      	movs	r2, #66	; 0x42
 8002410:	2110      	movs	r1, #16
 8002412:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2208      	movs	r2, #8
 8002424:	18ba      	adds	r2, r7, r2
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d911      	bls.n	800245e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	b2da      	uxtb	r2, r3
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	045c      	lsls	r4, r3, #17
 800244a:	230a      	movs	r3, #10
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	8819      	ldrh	r1, [r3, #0]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <HAL_I2C_Master_Receive+0x208>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	0023      	movs	r3, r4
 8002458:	f000 fb26 	bl	8002aa8 <I2C_TransferConfig>
 800245c:	e076      	b.n	800254c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	049c      	lsls	r4, r3, #18
 8002472:	230a      	movs	r3, #10
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	8819      	ldrh	r1, [r3, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_I2C_Master_Receive+0x208>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	0023      	movs	r3, r4
 8002480:	f000 fb12 	bl	8002aa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002484:	e062      	b.n	800254c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f989 	bl	80027a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e082      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03a      	beq.n	800254c <HAL_I2C_Master_Receive+0x1ac>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d136      	bne.n	800254c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	0013      	movs	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	f000 f882 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e053      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d911      	bls.n	8002526 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	b2da      	uxtb	r2, r3
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	045c      	lsls	r4, r3, #17
 8002512:	230a      	movs	r3, #10
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	8819      	ldrh	r1, [r3, #0]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	0023      	movs	r3, r4
 8002520:	f000 fac2 	bl	8002aa8 <I2C_TransferConfig>
 8002524:	e012      	b.n	800254c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	b2da      	uxtb	r2, r3
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	049c      	lsls	r4, r3, #18
 800253a:	230a      	movs	r3, #10
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	8819      	ldrh	r1, [r3, #0]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	2300      	movs	r3, #0
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	0023      	movs	r3, r4
 8002548:	f000 faae 	bl	8002aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d197      	bne.n	8002486 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 f8dd 	bl	800271c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01a      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	490b      	ldr	r1, [pc, #44]	; (80025ac <HAL_I2C_Master_Receive+0x20c>)
 800257e:	400a      	ands	r2, r1
 8002580:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2241      	movs	r2, #65	; 0x41
 8002586:	2120      	movs	r1, #32
 8002588:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2242      	movs	r2, #66	; 0x42
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
  }
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b007      	add	sp, #28
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	80002400 	.word	0x80002400
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d103      	bne.n	80025ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d007      	beq.n	80025ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	619a      	str	r2, [r3, #24]
  }
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002604:	e030      	b.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	d02d      	beq.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7ff faa6 	bl	8001b5c <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d122      	bne.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	425a      	negs	r2, r3
 8002632:	4153      	adcs	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	001a      	movs	r2, r3
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d113      	bne.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	2220      	movs	r2, #32
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2241      	movs	r2, #65	; 0x41
 8002650:	2120      	movs	r1, #32
 8002652:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2242      	movs	r2, #66	; 0x42
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00f      	b.n	8002688 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	425a      	negs	r2, r3
 8002678:	4153      	adcs	r3, r2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	001a      	movs	r2, r3
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d0bf      	beq.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b004      	add	sp, #16
 800268e:	bd80      	pop	{r7, pc}

08002690 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269c:	e032      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f8ff 	bl	80028a8 <I2C_IsErrorOccurred>
 80026aa:	1e03      	subs	r3, r0, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e030      	b.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3301      	adds	r3, #1
 80026b6:	d025      	beq.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7ff fa50 	bl	8001b5c <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11a      	bne.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d013      	beq.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2220      	movs	r2, #32
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2241      	movs	r2, #65	; 0x41
 80026ec:	2120      	movs	r1, #32
 80026ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2242      	movs	r2, #66	; 0x42
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d1c5      	bne.n	800269e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002728:	e02f      	b.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f8b9 	bl	80028a8 <I2C_IsErrorOccurred>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02d      	b.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7ff fa0d 	bl	8001b5c <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11a      	bne.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	2b20      	cmp	r3, #32
 8002760:	d013      	beq.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	2220      	movs	r2, #32
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	2120      	movs	r1, #32
 8002774:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2242      	movs	r2, #66	; 0x42
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e007      	b.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2220      	movs	r2, #32
 8002792:	4013      	ands	r3, r2
 8002794:	2b20      	cmp	r3, #32
 8002796:	d1c8      	bne.n	800272a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b0:	e06b      	b.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f875 	bl	80028a8 <I2C_IsErrorOccurred>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e069      	b.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2220      	movs	r2, #32
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d138      	bne.n	8002846 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2204      	movs	r2, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d105      	bne.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e055      	b.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2210      	movs	r2, #16
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d107      	bne.n	800280c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2204      	movs	r2, #4
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
 800280a:	e002      	b.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2220      	movs	r2, #32
 8002818:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	491f      	ldr	r1, [pc, #124]	; (80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002826:	400a      	ands	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2241      	movs	r2, #65	; 0x41
 800282e:	2120      	movs	r1, #32
 8002830:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2242      	movs	r2, #66	; 0x42
 8002836:	2100      	movs	r1, #0
 8002838:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e029      	b.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7ff f989 	bl	8001b5c <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2204      	movs	r2, #4
 8002864:	4013      	ands	r3, r2
 8002866:	2b04      	cmp	r3, #4
 8002868:	d00f      	beq.n	800288a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	2220      	movs	r2, #32
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2241      	movs	r2, #65	; 0x41
 800287a:	2120      	movs	r1, #32
 800287c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e007      	b.n	800289a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	2b04      	cmp	r3, #4
 8002896:	d18c      	bne.n	80027b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2327      	movs	r3, #39	; 0x27
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2210      	movs	r2, #16
 80028d0:	4013      	ands	r3, r2
 80028d2:	d100      	bne.n	80028d6 <I2C_IsErrorOccurred+0x2e>
 80028d4:	e082      	b.n	80029dc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028de:	e060      	b.n	80029a2 <I2C_IsErrorOccurred+0xfa>
 80028e0:	2427      	movs	r4, #39	; 0x27
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	193a      	adds	r2, r7, r4
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	d058      	beq.n	80029a2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7ff f934 	bl	8001b5c <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d306      	bcc.n	800290e <I2C_IsErrorOccurred+0x66>
 8002900:	193b      	adds	r3, r7, r4
 8002902:	193a      	adds	r2, r7, r4
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d149      	bne.n	80029a2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800291c:	2013      	movs	r0, #19
 800291e:	183b      	adds	r3, r7, r0
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	2142      	movs	r1, #66	; 0x42
 8002924:	5c52      	ldrb	r2, [r2, r1]
 8002926:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	401a      	ands	r2, r3
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	429a      	cmp	r2, r3
 800293a:	d126      	bne.n	800298a <I2C_IsErrorOccurred+0xe2>
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	01db      	lsls	r3, r3, #7
 8002942:	429a      	cmp	r2, r3
 8002944:	d021      	beq.n	800298a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002946:	183b      	adds	r3, r7, r0
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b20      	cmp	r3, #32
 800294c:	d01d      	beq.n	800298a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	01c9      	lsls	r1, r1, #7
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002960:	f7ff f8fc 	bl	8001b5c <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002968:	e00f      	b.n	800298a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800296a:	f7ff f8f7 	bl	8001b5c <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b19      	cmp	r3, #25
 8002976:	d908      	bls.n	800298a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2220      	movs	r2, #32
 800297c:	4313      	orrs	r3, r2
 800297e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002980:	2327      	movs	r3, #39	; 0x27
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]

              break;
 8002988:	e00b      	b.n	80029a2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2220      	movs	r2, #32
 8002992:	4013      	ands	r3, r2
 8002994:	2127      	movs	r1, #39	; 0x27
 8002996:	187a      	adds	r2, r7, r1
 8002998:	1879      	adds	r1, r7, r1
 800299a:	7809      	ldrb	r1, [r1, #0]
 800299c:	7011      	strb	r1, [r2, #0]
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d1e3      	bne.n	800296a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2220      	movs	r2, #32
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d004      	beq.n	80029ba <I2C_IsErrorOccurred+0x112>
 80029b0:	2327      	movs	r3, #39	; 0x27
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d092      	beq.n	80028e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029ba:	2327      	movs	r3, #39	; 0x27
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2204      	movs	r2, #4
 80029d0:	4313      	orrs	r3, r2
 80029d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d4:	2327      	movs	r3, #39	; 0x27
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00c      	beq.n	8002a08 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4313      	orrs	r3, r2
 80029f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	0052      	lsls	r2, r2, #1
 80029fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a00:	2327      	movs	r3, #39	; 0x27
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d00c      	beq.n	8002a2c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2208      	movs	r2, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	00d2      	lsls	r2, r2, #3
 8002a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a24:	2327      	movs	r3, #39	; 0x27
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00c      	beq.n	8002a50 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a48:	2327      	movs	r3, #39	; 0x27
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a50:	2327      	movs	r3, #39	; 0x27
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fda7 	bl	80025b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	490d      	ldr	r1, [pc, #52]	; (8002aa4 <I2C_IsErrorOccurred+0x1fc>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2241      	movs	r2, #65	; 0x41
 8002a82:	2120      	movs	r1, #32
 8002a84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2242      	movs	r2, #66	; 0x42
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2240      	movs	r2, #64	; 0x40
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a96:	2327      	movs	r3, #39	; 0x27
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b00b      	add	sp, #44	; 0x2c
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	fe00e800 	.word	0xfe00e800

08002aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	0008      	movs	r0, r1
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	240a      	movs	r4, #10
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	2009      	movs	r0, #9
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	059b      	lsls	r3, r3, #22
 8002acc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	0419      	lsls	r1, r3, #16
 8002ad4:	23ff      	movs	r3, #255	; 0xff
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ada:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af2:	0d51      	lsrs	r1, r2, #21
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	00d2      	lsls	r2, r2, #3
 8002af8:	400a      	ands	r2, r1
 8002afa:	4907      	ldr	r1, [pc, #28]	; (8002b18 <I2C_TransferConfig+0x70>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	43d2      	mvns	r2, r2
 8002b00:	401a      	ands	r2, r3
 8002b02:	0011      	movs	r1, r2
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b007      	add	sp, #28
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	03ff63ff 	.word	0x03ff63ff

08002b1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	; 0x41
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d138      	bne.n	8002ba4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e032      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2241      	movs	r2, #65	; 0x41
 8002b4c:	2124      	movs	r1, #36	; 0x24
 8002b4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4911      	ldr	r1, [pc, #68]	; (8002bb0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2241      	movs	r2, #65	; 0x41
 8002b94:	2120      	movs	r1, #32
 8002b96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	ffffefff 	.word	0xffffefff

08002bb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2241      	movs	r2, #65	; 0x41
 8002bc2:	5c9b      	ldrb	r3, [r3, r2]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d139      	bne.n	8002c3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	5c9b      	ldrb	r3, [r3, r2]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e033      	b.n	8002c40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2241      	movs	r2, #65	; 0x41
 8002be4:	2124      	movs	r1, #36	; 0x24
 8002be6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2241      	movs	r2, #65	; 0x41
 8002c2e:	2120      	movs	r1, #32
 8002c30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b004      	add	sp, #16
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fffff0ff 	.word	0xfffff0ff

08002c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f000 fbbf 	bl	80033de <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c60:	4bc9      	ldr	r3, [pc, #804]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	220c      	movs	r2, #12
 8002c66:	4013      	ands	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6a:	4bc7      	ldr	r3, [pc, #796]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	025b      	lsls	r3, r3, #9
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCC_OscConfig+0x36>
 8002c80:	e07e      	b.n	8002d80 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d007      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x68>
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	4bbb      	ldr	r3, [pc, #748]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5a>
 8002ca4:	e06b      	b.n	8002d7e <HAL_RCC_OscConfig+0x132>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d167      	bne.n	8002d7e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 fb95 	bl	80033de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x84>
 8002cc0:	4bb1      	ldr	r3, [pc, #708]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4bb0      	ldr	r3, [pc, #704]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	0249      	lsls	r1, r1, #9
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e027      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	23a0      	movs	r3, #160	; 0xa0
 8002cd6:	02db      	lsls	r3, r3, #11
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10e      	bne.n	8002cfa <HAL_RCC_OscConfig+0xae>
 8002cdc:	4baa      	ldr	r3, [pc, #680]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4ba9      	ldr	r3, [pc, #676]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	02c9      	lsls	r1, r1, #11
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	4ba7      	ldr	r3, [pc, #668]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4ba6      	ldr	r3, [pc, #664]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0249      	lsls	r1, r1, #9
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e012      	b.n	8002d20 <HAL_RCC_OscConfig+0xd4>
 8002cfa:	4ba3      	ldr	r3, [pc, #652]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4ba2      	ldr	r3, [pc, #648]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d00:	49a2      	ldr	r1, [pc, #648]	; (8002f8c <HAL_RCC_OscConfig+0x340>)
 8002d02:	400a      	ands	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4ba0      	ldr	r3, [pc, #640]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4b9c      	ldr	r3, [pc, #624]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b9b      	ldr	r3, [pc, #620]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d1a:	499d      	ldr	r1, [pc, #628]	; (8002f90 <HAL_RCC_OscConfig+0x344>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe ff18 	bl	8001b5c <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	e009      	b.n	8002d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d32:	f7fe ff13 	bl	8001b5c <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b64      	cmp	r3, #100	; 0x64
 8002d3e:	d902      	bls.n	8002d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	f000 fb4c 	bl	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d46:	4b90      	ldr	r3, [pc, #576]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	029b      	lsls	r3, r3, #10
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d0ef      	beq.n	8002d32 <HAL_RCC_OscConfig+0xe6>
 8002d52:	e015      	b.n	8002d80 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe ff02 	bl	8001b5c <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fefd 	bl	8001b5c <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e336      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d70:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x112>
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2202      	movs	r2, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	d100      	bne.n	8002d8c <HAL_RCC_OscConfig+0x140>
 8002d8a:	e099      	b.n	8002ec0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	2220      	movs	r2, #32
 8002d96:	4013      	ands	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b7a      	ldr	r3, [pc, #488]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002da0:	2120      	movs	r1, #32
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2220      	movs	r2, #32
 8002daa:	4393      	bics	r3, r2
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d13e      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1ec>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002dc0:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x188>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e304      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a6e      	ldr	r2, [pc, #440]	; (8002f94 <HAL_RCC_OscConfig+0x348>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2209      	movs	r2, #9
 8002df0:	4393      	bics	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfc:	f000 fc42 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8002e00:	0001      	movs	r1, r0
 8002e02:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	220f      	movs	r2, #15
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_RCC_OscConfig+0x34c>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	000a      	movs	r2, r1
 8002e12:	40da      	lsrs	r2, r3
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x350>)
 8002e16:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_OscConfig+0x354>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2513      	movs	r5, #19
 8002e1e:	197c      	adds	r4, r7, r5
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7fe fe55 	bl	8001ad0 <HAL_InitTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e2a:	197b      	adds	r3, r7, r5
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d046      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002e32:	197b      	adds	r3, r7, r5
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	e2d2      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d027      	beq.n	8002e8e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e3e:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2209      	movs	r2, #9
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fe84 	bl	8001b5c <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fe7f 	bl	8001b5c <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e2b8      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d0f1      	beq.n	8002e5a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <HAL_RCC_OscConfig+0x348>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	e018      	b.n	8002ec0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fe5f 	bl	8001b5c <HAL_GetTick>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fe5a 	bl	8001b5c <HAL_GetTick>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e293      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb6:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d1f1      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d100      	bne.n	8002ecc <HAL_RCC_OscConfig+0x280>
 8002eca:	e0a2      	b.n	8003012 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d140      	bne.n	8002f54 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x29e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e279      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x358>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	0a19      	lsrs	r1, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	061a      	lsls	r2, r3, #24
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	3301      	adds	r3, #1
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0212      	lsls	r2, r2, #8
 8002f1e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	210f      	movs	r1, #15
 8002f28:	400b      	ands	r3, r1
 8002f2a:	491b      	ldr	r1, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x34c>)
 8002f2c:	5ccb      	ldrb	r3, [r1, r3]
 8002f2e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCC_OscConfig+0x350>)
 8002f32:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_RCC_OscConfig+0x354>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2513      	movs	r5, #19
 8002f3a:	197c      	adds	r4, r7, r5
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fe fdc7 	bl	8001ad0 <HAL_InitTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d061      	beq.n	8003012 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002f4e:	197b      	adds	r3, r7, r5
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	e244      	b.n	80033de <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d040      	beq.n	8002fde <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x33c>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0049      	lsls	r1, r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fdf7 	bl	8001b5c <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f72:	e019      	b.n	8002fa8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f74:	f7fe fdf2 	bl	8001b5c <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d912      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e22b      	b.n	80033de <HAL_RCC_OscConfig+0x792>
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	fffeffff 	.word	0xfffeffff
 8002f90:	fffbffff 	.word	0xfffbffff
 8002f94:	ffffe0ff 	.word	0xffffe0ff
 8002f98:	08004d94 	.word	0x08004d94
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fa8:	4bca      	ldr	r3, [pc, #808]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0df      	beq.n	8002f74 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb4:	4bc7      	ldr	r3, [pc, #796]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4ac7      	ldr	r2, [pc, #796]	; (80032d8 <HAL_RCC_OscConfig+0x68c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc2:	4bc4      	ldr	r3, [pc, #784]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc8:	4bc2      	ldr	r3, [pc, #776]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	061a      	lsls	r2, r3, #24
 8002fd6:	4bbf      	ldr	r3, [pc, #764]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	e019      	b.n	8003012 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fde:	4bbd      	ldr	r3, [pc, #756]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4bbc      	ldr	r3, [pc, #752]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8002fe4:	49bd      	ldr	r1, [pc, #756]	; (80032dc <HAL_RCC_OscConfig+0x690>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fdb7 	bl	8001b5c <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fdb2 	bl	8001b5c <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1eb      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003006:	4bb3      	ldr	r3, [pc, #716]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003024:	4bab      	ldr	r3, [pc, #684]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003028:	4baa      	ldr	r3, [pc, #680]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800302a:	2101      	movs	r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe fd94 	bl	8001b5c <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe fd8f 	bl	8001b5c <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1c8      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800304c:	4ba1      	ldr	r3, [pc, #644]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	2202      	movs	r2, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d0f1      	beq.n	800303a <HAL_RCC_OscConfig+0x3ee>
 8003056:	e018      	b.n	800308a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b9e      	ldr	r3, [pc, #632]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800305a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800305c:	4b9d      	ldr	r3, [pc, #628]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fe fd7a 	bl	8001b5c <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe fd75 	bl	8001b5c <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1ae      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003080:	4b94      	ldr	r3, [pc, #592]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d1f1      	bne.n	800306e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x44a>
 8003094:	e0ae      	b.n	80031f4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2023      	movs	r0, #35	; 0x23
 8003098:	183b      	adds	r3, r7, r0
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	055b      	lsls	r3, r3, #21
 80030a6:	4013      	ands	r3, r2
 80030a8:	d109      	bne.n	80030be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	4b89      	ldr	r3, [pc, #548]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0549      	lsls	r1, r1, #21
 80030b4:	430a      	orrs	r2, r1
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80030b8:	183b      	adds	r3, r7, r0
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x694>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4013      	ands	r3, r2
 80030c8:	d11a      	bne.n	8003100 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x694>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b84      	ldr	r3, [pc, #528]	; (80032e0 <HAL_RCC_OscConfig+0x694>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0049      	lsls	r1, r1, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fd40 	bl	8001b5c <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e2:	f7fe fd3b 	bl	8001b5c <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	; 0x64
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e174      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x694>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4d0>
 800310c:	4b71      	ldr	r3, [pc, #452]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003110:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	651a      	str	r2, [r3, #80]	; 0x50
 800311a:	e031      	b.n	8003180 <HAL_RCC_OscConfig+0x534>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10c      	bne.n	800313e <HAL_RCC_OscConfig+0x4f2>
 8003124:	4b6b      	ldr	r3, [pc, #428]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800312a:	496c      	ldr	r1, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x690>)
 800312c:	400a      	ands	r2, r1
 800312e:	651a      	str	r2, [r3, #80]	; 0x50
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003134:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003136:	496b      	ldr	r1, [pc, #428]	; (80032e4 <HAL_RCC_OscConfig+0x698>)
 8003138:	400a      	ands	r2, r1
 800313a:	651a      	str	r2, [r3, #80]	; 0x50
 800313c:	e020      	b.n	8003180 <HAL_RCC_OscConfig+0x534>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	23a0      	movs	r3, #160	; 0xa0
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	429a      	cmp	r2, r3
 8003148:	d10e      	bne.n	8003168 <HAL_RCC_OscConfig+0x51c>
 800314a:	4b62      	ldr	r3, [pc, #392]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800314c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800314e:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	00c9      	lsls	r1, r1, #3
 8003154:	430a      	orrs	r2, r1
 8003156:	651a      	str	r2, [r3, #80]	; 0x50
 8003158:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800315a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315c:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	0049      	lsls	r1, r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	651a      	str	r2, [r3, #80]	; 0x50
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x534>
 8003168:	4b5a      	ldr	r3, [pc, #360]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800316a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800316e:	495b      	ldr	r1, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x690>)
 8003170:	400a      	ands	r2, r1
 8003172:	651a      	str	r2, [r3, #80]	; 0x50
 8003174:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003178:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800317a:	495a      	ldr	r1, [pc, #360]	; (80032e4 <HAL_RCC_OscConfig+0x698>)
 800317c:	400a      	ands	r2, r1
 800317e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003188:	f7fe fce8 	bl	8001b5c <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003190:	e009      	b.n	80031a6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fce3 	bl	8001b5c <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_OscConfig+0x69c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e11b      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80031a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d0ef      	beq.n	8003192 <HAL_RCC_OscConfig+0x546>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe fcd2 	bl	8001b5c <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031bc:	e009      	b.n	80031d2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fccd 	bl	8001b5c <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x69c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e105      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d2:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80031d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d1ef      	bne.n	80031be <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031de:	2323      	movs	r3, #35	; 0x23
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80031ee:	493f      	ldr	r1, [pc, #252]	; (80032ec <HAL_RCC_OscConfig+0x6a0>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2220      	movs	r2, #32
 80031fa:	4013      	ands	r3, r2
 80031fc:	d049      	beq.n	8003292 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d026      	beq.n	8003254 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800320c:	2101      	movs	r1, #1
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003218:	2101      	movs	r1, #1
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x6a4>)
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_RCC_OscConfig+0x6a4>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0189      	lsls	r1, r1, #6
 8003228:	430a      	orrs	r2, r1
 800322a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe fc96 	bl	8001b5c <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003236:	f7fe fc91 	bl	8001b5c <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0ca      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2202      	movs	r2, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d0f1      	beq.n	8003236 <HAL_RCC_OscConfig+0x5ea>
 8003252:	e01e      	b.n	8003292 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_RCC_OscConfig+0x6a4>)
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_OscConfig+0x6a4>)
 8003266:	4923      	ldr	r1, [pc, #140]	; (80032f4 <HAL_RCC_OscConfig+0x6a8>)
 8003268:	400a      	ands	r2, r1
 800326a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fc76 	bl	8001b5c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003276:	f7fe fc71 	bl	8001b5c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0aa      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d1f1      	bne.n	8003276 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <HAL_RCC_OscConfig+0x650>
 800329a:	e09f      	b.n	80033dc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d100      	bne.n	80032a4 <HAL_RCC_OscConfig+0x658>
 80032a2:	e078      	b.n	8003396 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d159      	bne.n	8003360 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCC_OscConfig+0x688>)
 80032b2:	4911      	ldr	r1, [pc, #68]	; (80032f8 <HAL_RCC_OscConfig+0x6ac>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fc50 	bl	8001b5c <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe fc4b 	bl	8001b5c <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d915      	bls.n	80032fc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e084      	b.n	80033de <HAL_RCC_OscConfig+0x792>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	ffff1fff 	.word	0xffff1fff
 80032dc:	fffffeff 	.word	0xfffffeff
 80032e0:	40007000 	.word	0x40007000
 80032e4:	fffffbff 	.word	0xfffffbff
 80032e8:	00001388 	.word	0x00001388
 80032ec:	efffffff 	.word	0xefffffff
 80032f0:	40010000 	.word	0x40010000
 80032f4:	ffffdfff 	.word	0xffffdfff
 80032f8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	049b      	lsls	r3, r3, #18
 8003304:	4013      	ands	r3, r2
 8003306:	d1dc      	bne.n	80032c2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a37      	ldr	r2, [pc, #220]	; (80033ec <HAL_RCC_OscConfig+0x7a0>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	431a      	orrs	r2, r3
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	0449      	lsls	r1, r1, #17
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fe fc11 	bl	8001b5c <HAL_GetTick>
 800333a:	0003      	movs	r3, r0
 800333c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fc0c 	bl	8001b5c <HAL_GetTick>
 8003344:	0002      	movs	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e045      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	049b      	lsls	r3, r3, #18
 800335a:	4013      	ands	r3, r2
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x6f4>
 800335e:	e03d      	b.n	80033dc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 8003366:	4922      	ldr	r1, [pc, #136]	; (80033f0 <HAL_RCC_OscConfig+0x7a4>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fbf6 	bl	8001b5c <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe fbf1 	bl	8001b5c <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e02a      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	049b      	lsls	r3, r3, #18
 8003390:	4013      	ands	r3, r2
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x72a>
 8003394:	e022      	b.n	80033dc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e01d      	b.n	80033de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_OscConfig+0x79c>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	401a      	ands	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	23f0      	movs	r3, #240	; 0xf0
 80033bc:	039b      	lsls	r3, r3, #14
 80033be:	401a      	ands	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	23c0      	movs	r3, #192	; 0xc0
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	401a      	ands	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b00a      	add	sp, #40	; 0x28
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	40021000 	.word	0x40021000
 80033ec:	ff02ffff 	.word	0xff02ffff
 80033f0:	feffffff 	.word	0xfeffffff

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e128      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b96      	ldr	r3, [pc, #600]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d91e      	bls.n	8003454 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b93      	ldr	r3, [pc, #588]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4393      	bics	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	4b90      	ldr	r3, [pc, #576]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003428:	f7fe fb98 	bl	8001b5c <HAL_GetTick>
 800342c:	0003      	movs	r3, r0
 800342e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003430:	e009      	b.n	8003446 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003432:	f7fe fb93 	bl	8001b5c <HAL_GetTick>
 8003436:	0002      	movs	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	4a8a      	ldr	r2, [pc, #552]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e109      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b87      	ldr	r3, [pc, #540]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d1ee      	bne.n	8003432 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2202      	movs	r2, #2
 800345a:	4013      	ands	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345e:	4b83      	ldr	r3, [pc, #524]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	22f0      	movs	r2, #240	; 0xf0
 8003464:	4393      	bics	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 800346e:	430a      	orrs	r2, r1
 8003470:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2201      	movs	r2, #1
 8003478:	4013      	ands	r3, r2
 800347a:	d100      	bne.n	800347e <HAL_RCC_ClockConfig+0x8a>
 800347c:	e089      	b.n	8003592 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003486:	4b79      	ldr	r3, [pc, #484]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	029b      	lsls	r3, r3, #10
 800348e:	4013      	ands	r3, r2
 8003490:	d120      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0e1      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800349e:	4b73      	ldr	r3, [pc, #460]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	049b      	lsls	r3, r3, #18
 80034a6:	4013      	ands	r3, r2
 80034a8:	d114      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0d5      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2204      	movs	r2, #4
 80034bc:	4013      	ands	r3, r2
 80034be:	d109      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0ca      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034c4:	4b69      	ldr	r3, [pc, #420]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0c2      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d4:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2203      	movs	r2, #3
 80034da:	4393      	bics	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fe fb38 	bl	8001b5c <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f8:	e009      	b.n	800350e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fa:	f7fe fb2f 	bl	8001b5c <HAL_GetTick>
 80034fe:	0002      	movs	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0a5      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800350e:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	220c      	movs	r2, #12
 8003514:	4013      	ands	r3, r2
 8003516:	2b08      	cmp	r3, #8
 8003518:	d1ef      	bne.n	80034fa <HAL_RCC_ClockConfig+0x106>
 800351a:	e03a      	b.n	8003592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d111      	bne.n	8003548 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003524:	e009      	b.n	800353a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003526:	f7fe fb19 	bl	8001b5c <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	4a4d      	ldr	r2, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e08f      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353a:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	220c      	movs	r2, #12
 8003540:	4013      	ands	r3, r2
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_ClockConfig+0x132>
 8003546:	e024      	b.n	8003592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11b      	bne.n	8003588 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003550:	e009      	b.n	8003566 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003552:	f7fe fb03 	bl	8001b5c <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e079      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	220c      	movs	r2, #12
 800356c:	4013      	ands	r3, r2
 800356e:	2b04      	cmp	r3, #4
 8003570:	d1ef      	bne.n	8003552 <HAL_RCC_ClockConfig+0x15e>
 8003572:	e00e      	b.n	8003592 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe faf2 	bl	8001b5c <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e068      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003588:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	220c      	movs	r2, #12
 800358e:	4013      	ands	r3, r2
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003592:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	4013      	ands	r3, r2
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d21e      	bcs.n	80035de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4393      	bics	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035b2:	f7fe fad3 	bl	8001b5c <HAL_GetTick>
 80035b6:	0003      	movs	r3, r0
 80035b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	e009      	b.n	80035d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe face 	bl	8001b5c <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_RCC_ClockConfig+0x274>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e044      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2204      	movs	r2, #4
 80035e4:	4013      	ands	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x27c>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	4013      	ands	r3, r2
 8003604:	d00a      	beq.n	800361c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_RCC_ClockConfig+0x280>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00da      	lsls	r2, r3, #3
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361c:	f000 f832 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003620:	0001      	movs	r1, r0
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x278>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	220f      	movs	r2, #15
 800362a:	4013      	ands	r3, r2
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x284>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	000a      	movs	r2, r1
 8003632:	40da      	lsrs	r2, r3
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_ClockConfig+0x288>)
 8003636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_RCC_ClockConfig+0x28c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	250b      	movs	r5, #11
 800363e:	197c      	adds	r4, r7, r5
 8003640:	0018      	movs	r0, r3
 8003642:	f7fe fa45 	bl	8001ad0 <HAL_InitTick>
 8003646:	0003      	movs	r3, r0
 8003648:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800364a:	197b      	adds	r3, r7, r5
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003652:	197b      	adds	r3, r7, r5
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	e000      	b.n	800365a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	40022000 	.word	0x40022000
 8003668:	00001388 	.word	0x00001388
 800366c:	40021000 	.word	0x40021000
 8003670:	fffff8ff 	.word	0xfffff8ff
 8003674:	ffffc7ff 	.word	0xffffc7ff
 8003678:	08004d94 	.word	0x08004d94
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b5b0      	push	{r4, r5, r7, lr}
 8003686:	b08e      	sub	sp, #56	; 0x38
 8003688:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	230c      	movs	r3, #12
 8003694:	4013      	ands	r3, r2
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d014      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 800369a:	d900      	bls.n	800369e <HAL_RCC_GetSysClockFreq+0x1a>
 800369c:	e07b      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x112>
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x24>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036a6:	e076      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	4013      	ands	r3, r2
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80036b6:	e07c      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036bc:	e079      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036c2:	e076      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	0c9a      	lsrs	r2, r3, #18
 80036c8:	230f      	movs	r3, #15
 80036ca:	401a      	ands	r2, r3
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_GetSysClockFreq+0x148>)
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	0d9a      	lsrs	r2, r3, #22
 80036d6:	2303      	movs	r3, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	3301      	adds	r3, #1
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	025b      	lsls	r3, r3, #9
 80036e6:	4013      	ands	r3, r2
 80036e8:	d01a      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	4a35      	ldr	r2, [pc, #212]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80036f4:	2300      	movs	r3, #0
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	f7fc fdb1 	bl	8000260 <__aeabi_lmul>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
 8003702:	0010      	movs	r0, r2
 8003704:	0019      	movs	r1, r3
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f7fc fd85 	bl	8000220 <__aeabi_uldivmod>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	0013      	movs	r3, r2
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	e037      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2210      	movs	r2, #16
 8003726:	4013      	ands	r3, r2
 8003728:	d01a      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003734:	2300      	movs	r3, #0
 8003736:	68b8      	ldr	r0, [r7, #8]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	f7fc fd91 	bl	8000260 <__aeabi_lmul>
 800373e:	0002      	movs	r2, r0
 8003740:	000b      	movs	r3, r1
 8003742:	0010      	movs	r0, r2
 8003744:	0019      	movs	r1, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f7fc fd65 	bl	8000220 <__aeabi_uldivmod>
 8003756:	0002      	movs	r2, r0
 8003758:	000b      	movs	r3, r1
 800375a:	0013      	movs	r3, r2
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
 800375e:	e017      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	0018      	movs	r0, r3
 8003764:	2300      	movs	r3, #0
 8003766:	0019      	movs	r1, r3
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800376a:	2300      	movs	r3, #0
 800376c:	f7fc fd78 	bl	8000260 <__aeabi_lmul>
 8003770:	0002      	movs	r2, r0
 8003772:	000b      	movs	r3, r1
 8003774:	0010      	movs	r0, r2
 8003776:	0019      	movs	r1, r3
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	001c      	movs	r4, r3
 800377c:	2300      	movs	r3, #0
 800377e:	001d      	movs	r5, r3
 8003780:	0022      	movs	r2, r4
 8003782:	002b      	movs	r3, r5
 8003784:	f7fc fd4c 	bl	8000220 <__aeabi_uldivmod>
 8003788:	0002      	movs	r2, r0
 800378a:	000b      	movs	r3, r1
 800378c:	0013      	movs	r3, r2
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003794:	e00d      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	2207      	movs	r2, #7
 800379e:	4013      	ands	r3, r2
 80037a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	3301      	adds	r3, #1
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	0212      	lsls	r2, r2, #8
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b00e      	add	sp, #56	; 0x38
 80037ba:	bdb0      	pop	{r4, r5, r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	003d0900 	.word	0x003d0900
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200
 80037cc:	08004dac 	.word	0x08004dac

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff2 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037ec:	0001      	movs	r1, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	2207      	movs	r2, #7
 80037f6:	4013      	ands	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fa:	5cd3      	ldrb	r3, [r2, r3]
 80037fc:	40d9      	lsrs	r1, r3
 80037fe:	000b      	movs	r3, r1
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40021000 	.word	0x40021000
 800380c:	08004da4 	.word	0x08004da4

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003814:	f7ff ffdc 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003818:	0001      	movs	r1, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	0adb      	lsrs	r3, r3, #11
 8003820:	2207      	movs	r2, #7
 8003822:	4013      	ands	r3, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	40d9      	lsrs	r1, r3
 800382a:	000b      	movs	r3, r1
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40021000 	.word	0x40021000
 8003838:	08004da4 	.word	0x08004da4

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003844:	2317      	movs	r3, #23
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2220      	movs	r2, #32
 8003852:	4013      	ands	r3, r2
 8003854:	d106      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4013      	ands	r3, r2
 8003860:	d100      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003862:	e104      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4bb9      	ldr	r3, [pc, #740]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	055b      	lsls	r3, r3, #21
 800386c:	4013      	ands	r3, r2
 800386e:	d10a      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4bb6      	ldr	r3, [pc, #728]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003874:	4bb5      	ldr	r3, [pc, #724]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	0549      	lsls	r1, r1, #21
 800387a:	430a      	orrs	r2, r1
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800387e:	2317      	movs	r3, #23
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4bb2      	ldr	r3, [pc, #712]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d11a      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4baf      	ldr	r3, [pc, #700]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4bae      	ldr	r3, [pc, #696]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	0049      	lsls	r1, r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a0:	f7fe f95c 	bl	8001b5c <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fe f957 	bl	8001b5c <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e143      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4ba4      	ldr	r3, [pc, #656]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4013      	ands	r3, r2
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80038c8:	4ba0      	ldr	r3, [pc, #640]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	23c0      	movs	r3, #192	; 0xc0
 80038ce:	039b      	lsls	r3, r3, #14
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	23c0      	movs	r3, #192	; 0xc0
 80038da:	039b      	lsls	r3, r3, #14
 80038dc:	4013      	ands	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	039b      	lsls	r3, r3, #14
 80038ec:	4013      	ands	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d013      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	23c0      	movs	r3, #192	; 0xc0
 80038fa:	029b      	lsls	r3, r3, #10
 80038fc:	401a      	ands	r2, r3
 80038fe:	23c0      	movs	r3, #192	; 0xc0
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	429a      	cmp	r2, r3
 8003904:	d10a      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003906:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	029b      	lsls	r3, r3, #10
 800390e:	401a      	ands	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	429a      	cmp	r2, r3
 8003916:	d101      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e113      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800391c:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800391e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003920:	23c0      	movs	r3, #192	; 0xc0
 8003922:	029b      	lsls	r3, r3, #10
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d049      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	23c0      	movs	r3, #192	; 0xc0
 8003934:	029b      	lsls	r3, r3, #10
 8003936:	4013      	ands	r3, r2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d004      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2220      	movs	r2, #32
 8003944:	4013      	ands	r3, r2
 8003946:	d10d      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	23c0      	movs	r3, #192	; 0xc0
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	4013      	ands	r3, r2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d034      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4013      	ands	r3, r2
 8003962:	d02e      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003964:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	4a7a      	ldr	r2, [pc, #488]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800396e:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0309      	lsls	r1, r1, #12
 8003978:	430a      	orrs	r2, r1
 800397a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800397c:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800397e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003980:	4b72      	ldr	r3, [pc, #456]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003982:	4975      	ldr	r1, [pc, #468]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003984:	400a      	ands	r2, r1
 8003986:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003988:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4013      	ands	r3, r2
 8003996:	d014      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe f8e0 	bl	8001b5c <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a0:	e009      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe f8db 	bl	8001b5c <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	4a6b      	ldr	r2, [pc, #428]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0c6      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d0ef      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4013      	ands	r3, r2
 80039cc:	d01f      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	401a      	ands	r2, r3
 80039d8:	23c0      	movs	r3, #192	; 0xc0
 80039da:	029b      	lsls	r3, r3, #10
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10c      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80039e0:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5e      	ldr	r2, [pc, #376]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	23c0      	movs	r3, #192	; 0xc0
 80039f0:	039b      	lsls	r3, r3, #14
 80039f2:	401a      	ands	r2, r3
 80039f4:	4b55      	ldr	r3, [pc, #340]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	23c0      	movs	r3, #192	; 0xc0
 8003a04:	029b      	lsls	r3, r3, #10
 8003a06:	401a      	ands	r2, r3
 8003a08:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2220      	movs	r2, #32
 8003a14:	4013      	ands	r3, r2
 8003a16:	d01f      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	23c0      	movs	r3, #192	; 0xc0
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	401a      	ands	r2, r3
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003a2a:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a4c      	ldr	r2, [pc, #304]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	23c0      	movs	r3, #192	; 0xc0
 8003a3a:	039b      	lsls	r3, r3, #14
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a46:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	23c0      	movs	r3, #192	; 0xc0
 8003a4e:	029b      	lsls	r3, r3, #10
 8003a50:	401a      	ands	r2, r3
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a58:	2317      	movs	r3, #23
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a68:	493e      	ldr	r1, [pc, #248]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	4393      	bics	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2202      	movs	r2, #2
 8003a92:	4013      	ands	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2208      	movs	r2, #8
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b006      	add	sp, #24
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40007000 	.word	0x40007000
 8003b54:	fffcffff 	.word	0xfffcffff
 8003b58:	fff7ffff 	.word	0xfff7ffff
 8003b5c:	00001388 	.word	0x00001388
 8003b60:	ffcfffff 	.word	0xffcfffff
 8003b64:	efffffff 	.word	0xefffffff
 8003b68:	fffff3ff 	.word	0xfffff3ff
 8003b6c:	ffffcfff 	.word	0xffffcfff
 8003b70:	fbffffff 	.word	0xfbffffff
 8003b74:	fff3ffff 	.word	0xfff3ffff

08003b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e032      	b.n	8003bf0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2239      	movs	r2, #57	; 0x39
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2238      	movs	r2, #56	; 0x38
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fd febf 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2239      	movs	r2, #57	; 0x39
 8003baa:	2102      	movs	r1, #2
 8003bac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	0010      	movs	r0, r2
 8003bba:	f000 fa01 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223e      	movs	r2, #62	; 0x3e
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	223a      	movs	r2, #58	; 0x3a
 8003bca:	2101      	movs	r1, #1
 8003bcc:	5499      	strb	r1, [r3, r2]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	223b      	movs	r2, #59	; 0x3b
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	5499      	strb	r1, [r3, r2]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	223c      	movs	r2, #60	; 0x3c
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223d      	movs	r2, #61	; 0x3d
 8003be2:	2101      	movs	r1, #1
 8003be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2239      	movs	r2, #57	; 0x39
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2202      	movs	r2, #2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d124      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2202      	movs	r2, #2
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d11d      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4252      	negs	r2, r2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4013      	ands	r3, r2
 8003c36:	d004      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f9a8 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e007      	b.n	8003c52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 f99b 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f9a7 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d125      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d11e      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2205      	movs	r2, #5
 8003c7a:	4252      	negs	r2, r2
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	23c0      	movs	r3, #192	; 0xc0
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 f97b 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003c9a:	e007      	b.n	8003cac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f96e 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 f97a 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d124      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11d      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2209      	movs	r2, #9
 8003cd4:	4252      	negs	r2, r2
 8003cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f94f 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 f942 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f94e 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2210      	movs	r2, #16
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d125      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2210      	movs	r2, #16
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d11e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2211      	movs	r2, #17
 8003d2c:	4252      	negs	r2, r2
 8003d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2208      	movs	r2, #8
 8003d34:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	23c0      	movs	r3, #192	; 0xc0
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4013      	ands	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 f922 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e007      	b.n	8003d5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 f915 	bl	8003f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 f921 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10f      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d108      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2202      	movs	r2, #2
 8003d86:	4252      	negs	r2, r2
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f000 f8ef 	bl	8003f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2240      	movs	r2, #64	; 0x40
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2241      	movs	r2, #65	; 0x41
 8003db4:	4252      	negs	r2, r2
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 f8f8 	bl	8003fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	230f      	movs	r3, #15
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2238      	movs	r2, #56	; 0x38
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIM_ConfigClockSource+0x20>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e0bc      	b.n	8003f62 <HAL_TIM_ConfigClockSource+0x19a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2238      	movs	r2, #56	; 0x38
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2239      	movs	r2, #57	; 0x39
 8003df4:	2102      	movs	r1, #2
 8003df6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2277      	movs	r2, #119	; 0x77
 8003e04:	4393      	bics	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	0192      	lsls	r2, r2, #6
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d040      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xde>
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	0192      	lsls	r2, r2, #6
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d900      	bls.n	8003e2e <HAL_TIM_ConfigClockSource+0x66>
 8003e2c:	e088      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0152      	lsls	r2, r2, #5
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d100      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x70>
 8003e36:	e088      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x182>
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0152      	lsls	r2, r2, #5
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d900      	bls.n	8003e42 <HAL_TIM_ConfigClockSource+0x7a>
 8003e40:	e07e      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e42:	2b70      	cmp	r3, #112	; 0x70
 8003e44:	d018      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0xb0>
 8003e46:	d900      	bls.n	8003e4a <HAL_TIM_ConfigClockSource+0x82>
 8003e48:	e07a      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e4a:	2b60      	cmp	r3, #96	; 0x60
 8003e4c:	d04f      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0x126>
 8003e4e:	d900      	bls.n	8003e52 <HAL_TIM_ConfigClockSource+0x8a>
 8003e50:	e076      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e52:	2b50      	cmp	r3, #80	; 0x50
 8003e54:	d03b      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x106>
 8003e56:	d900      	bls.n	8003e5a <HAL_TIM_ConfigClockSource+0x92>
 8003e58:	e072      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d057      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x146>
 8003e5e:	d900      	bls.n	8003e62 <HAL_TIM_ConfigClockSource+0x9a>
 8003e60:	e06e      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e62:	2b30      	cmp	r3, #48	; 0x30
 8003e64:	d063      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x166>
 8003e66:	d86b      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d060      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x166>
 8003e6c:	d868      	bhi.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d05d      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x166>
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d05b      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x166>
 8003e76:	e063      	b.n	8003f40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e88:	f000 f972 	bl	8004170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2277      	movs	r2, #119	; 0x77
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
      break;
 8003ea4:	e052      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	f000 f95b 	bl	8004170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	01c9      	lsls	r1, r1, #7
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
      break;
 8003ecc:	e03e      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eda:	001a      	movs	r2, r3
 8003edc:	f000 f8ce 	bl	800407c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2150      	movs	r1, #80	; 0x50
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 f928 	bl	800413c <TIM_ITRx_SetConfig>
      break;
 8003eec:	e02e      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efa:	001a      	movs	r2, r3
 8003efc:	f000 f8ec 	bl	80040d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2160      	movs	r1, #96	; 0x60
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f918 	bl	800413c <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e01e      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	f000 f8ae 	bl	800407c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f908 	bl	800413c <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e00e      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0019      	movs	r1, r3
 8003f38:	0010      	movs	r0, r2
 8003f3a:	f000 f8ff 	bl	800413c <TIM_ITRx_SetConfig>
      break;
 8003f3e:	e005      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f40:	230f      	movs	r3, #15
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2239      	movs	r2, #57	; 0x39
 8003f50:	2101      	movs	r1, #1
 8003f52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2238      	movs	r2, #56	; 0x38
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	781b      	ldrb	r3, [r3, #0]
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	ffff00ff 	.word	0xffff00ff

08003f70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	05db      	lsls	r3, r3, #23
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x32>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a23      	ldr	r2, [pc, #140]	; (800406c <TIM_Base_SetConfig+0xac>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x32>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <TIM_Base_SetConfig+0xb0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x32>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <TIM_Base_SetConfig+0xb4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2270      	movs	r2, #112	; 0x70
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	05db      	lsls	r3, r3, #23
 800400a:	429a      	cmp	r2, r3
 800400c:	d00b      	beq.n	8004026 <TIM_Base_SetConfig+0x66>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <TIM_Base_SetConfig+0xac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_Base_SetConfig+0x66>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <TIM_Base_SetConfig+0xb0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_Base_SetConfig+0x66>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <TIM_Base_SetConfig+0xb4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <TIM_Base_SetConfig+0xb8>)
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	4393      	bics	r3, r2
 800403e:	001a      	movs	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	615a      	str	r2, [r3, #20]
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40000400 	.word	0x40000400
 8004070:	40010800 	.word	0x40010800
 8004074:	40011400 	.word	0x40011400
 8004078:	fffffcff 	.word	0xfffffcff

0800407c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	2201      	movs	r2, #1
 8004094:	4393      	bics	r3, r2
 8004096:	001a      	movs	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	22f0      	movs	r2, #240	; 0xf0
 80040a6:	4393      	bics	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	220a      	movs	r2, #10
 80040b8:	4393      	bics	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b006      	add	sp, #24
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	2210      	movs	r2, #16
 80040ea:	4393      	bics	r3, r2
 80040ec:	001a      	movs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <TIM_TI2_ConfigInputStage+0x60>)
 8004102:	4013      	ands	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	22a0      	movs	r2, #160	; 0xa0
 8004114:	4393      	bics	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b006      	add	sp, #24
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	ffff0fff 	.word	0xffff0fff

0800413c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2270      	movs	r2, #112	; 0x70
 8004150:	4393      	bics	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	2207      	movs	r2, #7
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <TIM_ETR_SetConfig+0x3c>)
 8004188:	4013      	ands	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	431a      	orrs	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b006      	add	sp, #24
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	ffff00ff 	.word	0xffff00ff

080041b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2238      	movs	r2, #56	; 0x38
 80041be:	5c9b      	ldrb	r3, [r3, r2]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e047      	b.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2238      	movs	r2, #56	; 0x38
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2239      	movs	r2, #57	; 0x39
 80041d4:	2102      	movs	r1, #2
 80041d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2270      	movs	r2, #112	; 0x70
 80041ec:	4393      	bics	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	05db      	lsls	r3, r3, #23
 800420a:	429a      	cmp	r2, r3
 800420c:	d00e      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a13      	ldr	r2, [pc, #76]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	4393      	bics	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2239      	movs	r2, #57	; 0x39
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2238      	movs	r2, #56	; 0x38
 8004252:	2100      	movs	r1, #0
 8004254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	b004      	add	sp, #16
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40000400 	.word	0x40000400
 8004264:	40010800 	.word	0x40010800
 8004268:	40011400 	.word	0x40011400

0800426c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e044      	b.n	8004308 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2278      	movs	r2, #120	; 0x78
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0018      	movs	r0, r3
 8004292:	f7fd fb65 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2224      	movs	r2, #36	; 0x24
 800429a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2101      	movs	r1, #1
 80042a8:	438a      	bics	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 f830 	bl	8004314 <UART_SetConfig>
 80042b4:	0003      	movs	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e024      	b.n	8004308 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 fac1 	bl	8004850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	490d      	ldr	r1, [pc, #52]	; (8004310 <HAL_UART_Init+0xa4>)
 80042da:	400a      	ands	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	212a      	movs	r1, #42	; 0x2a
 80042ea:	438a      	bics	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0018      	movs	r0, r3
 8004302:	f000 fb59 	bl	80049b8 <UART_CheckIdleState>
 8004306:	0003      	movs	r3, r0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}
 8004310:	ffffb7ff 	.word	0xffffb7ff

08004314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b5b0      	push	{r4, r5, r7, lr}
 8004316:	b08e      	sub	sp, #56	; 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800431c:	231a      	movs	r3, #26
 800431e:	2218      	movs	r2, #24
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	431a      	orrs	r2, r3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4ac3      	ldr	r2, [pc, #780]	; (8004654 <UART_SetConfig+0x340>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4abe      	ldr	r2, [pc, #760]	; (8004658 <UART_SetConfig+0x344>)
 800435e:	4013      	ands	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4ab8      	ldr	r2, [pc, #736]	; (800465c <UART_SetConfig+0x348>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	4313      	orrs	r3, r2
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4ab4      	ldr	r2, [pc, #720]	; (8004660 <UART_SetConfig+0x34c>)
 8004390:	4013      	ands	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4ab0      	ldr	r2, [pc, #704]	; (8004664 <UART_SetConfig+0x350>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d131      	bne.n	800440c <UART_SetConfig+0xf8>
 80043a8:	4baf      	ldr	r3, [pc, #700]	; (8004668 <UART_SetConfig+0x354>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	2203      	movs	r2, #3
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d01d      	beq.n	80043f0 <UART_SetConfig+0xdc>
 80043b4:	d823      	bhi.n	80043fe <UART_SetConfig+0xea>
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d00c      	beq.n	80043d4 <UART_SetConfig+0xc0>
 80043ba:	d820      	bhi.n	80043fe <UART_SetConfig+0xea>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <UART_SetConfig+0xb2>
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d00e      	beq.n	80043e2 <UART_SetConfig+0xce>
 80043c4:	e01b      	b.n	80043fe <UART_SetConfig+0xea>
 80043c6:	231b      	movs	r3, #27
 80043c8:	2218      	movs	r2, #24
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e0b4      	b.n	800453e <UART_SetConfig+0x22a>
 80043d4:	231b      	movs	r3, #27
 80043d6:	2218      	movs	r2, #24
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e0ad      	b.n	800453e <UART_SetConfig+0x22a>
 80043e2:	231b      	movs	r3, #27
 80043e4:	2218      	movs	r2, #24
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	19db      	adds	r3, r3, r7
 80043ea:	2204      	movs	r2, #4
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e0a6      	b.n	800453e <UART_SetConfig+0x22a>
 80043f0:	231b      	movs	r3, #27
 80043f2:	2218      	movs	r2, #24
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	2208      	movs	r2, #8
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e09f      	b.n	800453e <UART_SetConfig+0x22a>
 80043fe:	231b      	movs	r3, #27
 8004400:	2218      	movs	r2, #24
 8004402:	189b      	adds	r3, r3, r2
 8004404:	19db      	adds	r3, r3, r7
 8004406:	2210      	movs	r2, #16
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e098      	b.n	800453e <UART_SetConfig+0x22a>
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a96      	ldr	r2, [pc, #600]	; (800466c <UART_SetConfig+0x358>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d131      	bne.n	800447a <UART_SetConfig+0x166>
 8004416:	4b94      	ldr	r3, [pc, #592]	; (8004668 <UART_SetConfig+0x354>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	220c      	movs	r2, #12
 800441c:	4013      	ands	r3, r2
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d01d      	beq.n	800445e <UART_SetConfig+0x14a>
 8004422:	d823      	bhi.n	800446c <UART_SetConfig+0x158>
 8004424:	2b08      	cmp	r3, #8
 8004426:	d00c      	beq.n	8004442 <UART_SetConfig+0x12e>
 8004428:	d820      	bhi.n	800446c <UART_SetConfig+0x158>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <UART_SetConfig+0x120>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00e      	beq.n	8004450 <UART_SetConfig+0x13c>
 8004432:	e01b      	b.n	800446c <UART_SetConfig+0x158>
 8004434:	231b      	movs	r3, #27
 8004436:	2218      	movs	r2, #24
 8004438:	189b      	adds	r3, r3, r2
 800443a:	19db      	adds	r3, r3, r7
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e07d      	b.n	800453e <UART_SetConfig+0x22a>
 8004442:	231b      	movs	r3, #27
 8004444:	2218      	movs	r2, #24
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	2202      	movs	r2, #2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e076      	b.n	800453e <UART_SetConfig+0x22a>
 8004450:	231b      	movs	r3, #27
 8004452:	2218      	movs	r2, #24
 8004454:	189b      	adds	r3, r3, r2
 8004456:	19db      	adds	r3, r3, r7
 8004458:	2204      	movs	r2, #4
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e06f      	b.n	800453e <UART_SetConfig+0x22a>
 800445e:	231b      	movs	r3, #27
 8004460:	2218      	movs	r2, #24
 8004462:	189b      	adds	r3, r3, r2
 8004464:	19db      	adds	r3, r3, r7
 8004466:	2208      	movs	r2, #8
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e068      	b.n	800453e <UART_SetConfig+0x22a>
 800446c:	231b      	movs	r3, #27
 800446e:	2218      	movs	r2, #24
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19db      	adds	r3, r3, r7
 8004474:	2210      	movs	r2, #16
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e061      	b.n	800453e <UART_SetConfig+0x22a>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7c      	ldr	r2, [pc, #496]	; (8004670 <UART_SetConfig+0x35c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d106      	bne.n	8004492 <UART_SetConfig+0x17e>
 8004484:	231b      	movs	r3, #27
 8004486:	2218      	movs	r2, #24
 8004488:	189b      	adds	r3, r3, r2
 800448a:	19db      	adds	r3, r3, r7
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e055      	b.n	800453e <UART_SetConfig+0x22a>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <UART_SetConfig+0x360>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d106      	bne.n	80044aa <UART_SetConfig+0x196>
 800449c:	231b      	movs	r3, #27
 800449e:	2218      	movs	r2, #24
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	19db      	adds	r3, r3, r7
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e049      	b.n	800453e <UART_SetConfig+0x22a>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6b      	ldr	r2, [pc, #428]	; (800465c <UART_SetConfig+0x348>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d13e      	bne.n	8004532 <UART_SetConfig+0x21e>
 80044b4:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <UART_SetConfig+0x354>)
 80044b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b8:	23c0      	movs	r3, #192	; 0xc0
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4013      	ands	r3, r2
 80044be:	22c0      	movs	r2, #192	; 0xc0
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d027      	beq.n	8004516 <UART_SetConfig+0x202>
 80044c6:	22c0      	movs	r2, #192	; 0xc0
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d82a      	bhi.n	8004524 <UART_SetConfig+0x210>
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d011      	beq.n	80044fa <UART_SetConfig+0x1e6>
 80044d6:	2280      	movs	r2, #128	; 0x80
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	4293      	cmp	r3, r2
 80044dc:	d822      	bhi.n	8004524 <UART_SetConfig+0x210>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <UART_SetConfig+0x1d8>
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	00d2      	lsls	r2, r2, #3
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <UART_SetConfig+0x1f4>
 80044ea:	e01b      	b.n	8004524 <UART_SetConfig+0x210>
 80044ec:	231b      	movs	r3, #27
 80044ee:	2218      	movs	r2, #24
 80044f0:	189b      	adds	r3, r3, r2
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e021      	b.n	800453e <UART_SetConfig+0x22a>
 80044fa:	231b      	movs	r3, #27
 80044fc:	2218      	movs	r2, #24
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	19db      	adds	r3, r3, r7
 8004502:	2202      	movs	r2, #2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e01a      	b.n	800453e <UART_SetConfig+0x22a>
 8004508:	231b      	movs	r3, #27
 800450a:	2218      	movs	r2, #24
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2204      	movs	r2, #4
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e013      	b.n	800453e <UART_SetConfig+0x22a>
 8004516:	231b      	movs	r3, #27
 8004518:	2218      	movs	r2, #24
 800451a:	189b      	adds	r3, r3, r2
 800451c:	19db      	adds	r3, r3, r7
 800451e:	2208      	movs	r2, #8
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e00c      	b.n	800453e <UART_SetConfig+0x22a>
 8004524:	231b      	movs	r3, #27
 8004526:	2218      	movs	r2, #24
 8004528:	189b      	adds	r3, r3, r2
 800452a:	19db      	adds	r3, r3, r7
 800452c:	2210      	movs	r2, #16
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e005      	b.n	800453e <UART_SetConfig+0x22a>
 8004532:	231b      	movs	r3, #27
 8004534:	2218      	movs	r2, #24
 8004536:	189b      	adds	r3, r3, r2
 8004538:	19db      	adds	r3, r3, r7
 800453a:	2210      	movs	r2, #16
 800453c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a46      	ldr	r2, [pc, #280]	; (800465c <UART_SetConfig+0x348>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d000      	beq.n	800454a <UART_SetConfig+0x236>
 8004548:	e09a      	b.n	8004680 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800454a:	231b      	movs	r3, #27
 800454c:	2218      	movs	r2, #24
 800454e:	189b      	adds	r3, r3, r2
 8004550:	19db      	adds	r3, r3, r7
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d01d      	beq.n	8004594 <UART_SetConfig+0x280>
 8004558:	dc20      	bgt.n	800459c <UART_SetConfig+0x288>
 800455a:	2b04      	cmp	r3, #4
 800455c:	d015      	beq.n	800458a <UART_SetConfig+0x276>
 800455e:	dc1d      	bgt.n	800459c <UART_SetConfig+0x288>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <UART_SetConfig+0x256>
 8004564:	2b02      	cmp	r3, #2
 8004566:	d005      	beq.n	8004574 <UART_SetConfig+0x260>
 8004568:	e018      	b.n	800459c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456a:	f7ff f93b 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800456e:	0003      	movs	r3, r0
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004572:	e01c      	b.n	80045ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <UART_SetConfig+0x354>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2210      	movs	r2, #16
 800457a:	4013      	ands	r3, r2
 800457c:	d002      	beq.n	8004584 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800457e:	4b3e      	ldr	r3, [pc, #248]	; (8004678 <UART_SetConfig+0x364>)
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004582:	e014      	b.n	80045ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004584:	4b3d      	ldr	r3, [pc, #244]	; (800467c <UART_SetConfig+0x368>)
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004588:	e011      	b.n	80045ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7ff f87b 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 800458e:	0003      	movs	r3, r0
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004592:	e00c      	b.n	80045ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800459a:	e008      	b.n	80045ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045a0:	231a      	movs	r3, #26
 80045a2:	2218      	movs	r2, #24
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	19db      	adds	r3, r3, r7
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
        break;
 80045ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d100      	bne.n	80045b6 <UART_SetConfig+0x2a2>
 80045b4:	e133      	b.n	800481e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	0013      	movs	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d305      	bcc.n	80045d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d906      	bls.n	80045e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80045d2:	231a      	movs	r3, #26
 80045d4:	2218      	movs	r2, #24
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e11e      	b.n	800481e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	000b      	movs	r3, r1
 80045ee:	0e1b      	lsrs	r3, r3, #24
 80045f0:	0010      	movs	r0, r2
 80045f2:	0205      	lsls	r5, r0, #8
 80045f4:	431d      	orrs	r5, r3
 80045f6:	000b      	movs	r3, r1
 80045f8:	021c      	lsls	r4, r3, #8
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68b8      	ldr	r0, [r7, #8]
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	1900      	adds	r0, r0, r4
 800460c:	4169      	adcs	r1, r5
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f7fb fe00 	bl	8000220 <__aeabi_uldivmod>
 8004620:	0002      	movs	r2, r0
 8004622:	000b      	movs	r3, r1
 8004624:	0013      	movs	r3, r2
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462a:	23c0      	movs	r3, #192	; 0xc0
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	429a      	cmp	r2, r3
 8004630:	d309      	bcc.n	8004646 <UART_SetConfig+0x332>
 8004632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	035b      	lsls	r3, r3, #13
 8004638:	429a      	cmp	r2, r3
 800463a:	d204      	bcs.n	8004646 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004642:	60da      	str	r2, [r3, #12]
 8004644:	e0eb      	b.n	800481e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004646:	231a      	movs	r3, #26
 8004648:	2218      	movs	r2, #24
 800464a:	189b      	adds	r3, r3, r2
 800464c:	19db      	adds	r3, r3, r7
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e0e4      	b.n	800481e <UART_SetConfig+0x50a>
 8004654:	efff69f3 	.word	0xefff69f3
 8004658:	ffffcfff 	.word	0xffffcfff
 800465c:	40004800 	.word	0x40004800
 8004660:	fffff4ff 	.word	0xfffff4ff
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	40004c00 	.word	0x40004c00
 8004674:	40005000 	.word	0x40005000
 8004678:	003d0900 	.word	0x003d0900
 800467c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	429a      	cmp	r2, r3
 800468a:	d000      	beq.n	800468e <UART_SetConfig+0x37a>
 800468c:	e070      	b.n	8004770 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800468e:	231b      	movs	r3, #27
 8004690:	2218      	movs	r2, #24
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b08      	cmp	r3, #8
 800469a:	d822      	bhi.n	80046e2 <UART_SetConfig+0x3ce>
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	4b67      	ldr	r3, [pc, #412]	; (800483c <UART_SetConfig+0x528>)
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a6:	f7ff f89d 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80046aa:	0003      	movs	r3, r0
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ae:	e021      	b.n	80046f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b0:	f7ff f8ae 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 80046b4:	0003      	movs	r3, r0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b8:	e01c      	b.n	80046f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <UART_SetConfig+0x52c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2210      	movs	r2, #16
 80046c0:	4013      	ands	r3, r2
 80046c2:	d002      	beq.n	80046ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80046c4:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <UART_SetConfig+0x530>)
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046c8:	e014      	b.n	80046f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80046ca:	4b5f      	ldr	r3, [pc, #380]	; (8004848 <UART_SetConfig+0x534>)
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ce:	e011      	b.n	80046f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d0:	f7fe ffd8 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80046d4:	0003      	movs	r3, r0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046d8:	e00c      	b.n	80046f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046e0:	e008      	b.n	80046f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046e6:	231a      	movs	r3, #26
 80046e8:	2218      	movs	r2, #24
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	19db      	adds	r3, r3, r7
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
        break;
 80046f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d100      	bne.n	80046fc <UART_SetConfig+0x3e8>
 80046fa:	e090      	b.n	800481e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	005a      	lsls	r2, r3, #1
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	18d2      	adds	r2, r2, r3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0019      	movs	r1, r3
 800470e:	0010      	movs	r0, r2
 8004710:	f7fb fcfa 	bl	8000108 <__udivsi3>
 8004714:	0003      	movs	r3, r0
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d921      	bls.n	8004762 <UART_SetConfig+0x44e>
 800471e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	025b      	lsls	r3, r3, #9
 8004724:	429a      	cmp	r2, r3
 8004726:	d21c      	bcs.n	8004762 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	b29a      	uxth	r2, r3
 800472c:	200e      	movs	r0, #14
 800472e:	2418      	movs	r4, #24
 8004730:	1903      	adds	r3, r0, r4
 8004732:	19db      	adds	r3, r3, r7
 8004734:	210f      	movs	r1, #15
 8004736:	438a      	bics	r2, r1
 8004738:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	b29b      	uxth	r3, r3
 8004740:	2207      	movs	r2, #7
 8004742:	4013      	ands	r3, r2
 8004744:	b299      	uxth	r1, r3
 8004746:	1903      	adds	r3, r0, r4
 8004748:	19db      	adds	r3, r3, r7
 800474a:	1902      	adds	r2, r0, r4
 800474c:	19d2      	adds	r2, r2, r7
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1902      	adds	r2, r0, r4
 800475a:	19d2      	adds	r2, r2, r7
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e05d      	b.n	800481e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	231a      	movs	r3, #26
 8004764:	2218      	movs	r2, #24
 8004766:	189b      	adds	r3, r3, r2
 8004768:	19db      	adds	r3, r3, r7
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e056      	b.n	800481e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004770:	231b      	movs	r3, #27
 8004772:	2218      	movs	r2, #24
 8004774:	189b      	adds	r3, r3, r2
 8004776:	19db      	adds	r3, r3, r7
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b08      	cmp	r3, #8
 800477c:	d822      	bhi.n	80047c4 <UART_SetConfig+0x4b0>
 800477e:	009a      	lsls	r2, r3, #2
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <UART_SetConfig+0x538>)
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004788:	f7ff f82c 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800478c:	0003      	movs	r3, r0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004790:	e021      	b.n	80047d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004792:	f7ff f83d 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004796:	0003      	movs	r3, r0
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800479a:	e01c      	b.n	80047d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <UART_SetConfig+0x52c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	4013      	ands	r3, r2
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <UART_SetConfig+0x530>)
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047aa:	e014      	b.n	80047d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b26      	ldr	r3, [pc, #152]	; (8004848 <UART_SetConfig+0x534>)
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b0:	e011      	b.n	80047d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe ff67 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80047b6:	0003      	movs	r3, r0
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ba:	e00c      	b.n	80047d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047c2:	e008      	b.n	80047d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047c8:	231a      	movs	r3, #26
 80047ca:	2218      	movs	r2, #24
 80047cc:	189b      	adds	r3, r3, r2
 80047ce:	19db      	adds	r3, r3, r7
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
        break;
 80047d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	085a      	lsrs	r2, r3, #1
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	18d2      	adds	r2, r2, r3
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0019      	movs	r1, r3
 80047ec:	0010      	movs	r0, r2
 80047ee:	f7fb fc8b 	bl	8000108 <__udivsi3>
 80047f2:	0003      	movs	r3, r0
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d90a      	bls.n	8004812 <UART_SetConfig+0x4fe>
 80047fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	429a      	cmp	r2, r3
 8004804:	d205      	bcs.n	8004812 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	b29a      	uxth	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004812:	231a      	movs	r3, #26
 8004814:	2218      	movs	r2, #24
 8004816:	189b      	adds	r3, r3, r2
 8004818:	19db      	adds	r3, r3, r7
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2200      	movs	r2, #0
 8004828:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800482a:	231a      	movs	r3, #26
 800482c:	2218      	movs	r2, #24
 800482e:	189b      	adds	r3, r3, r2
 8004830:	19db      	adds	r3, r3, r7
 8004832:	781b      	ldrb	r3, [r3, #0]
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b00e      	add	sp, #56	; 0x38
 800483a:	bdb0      	pop	{r4, r5, r7, pc}
 800483c:	08004db8 	.word	0x08004db8
 8004840:	40021000 	.word	0x40021000
 8004844:	003d0900 	.word	0x003d0900
 8004848:	00f42400 	.word	0x00f42400
 800484c:	08004ddc 	.word	0x08004ddc

08004850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2201      	movs	r2, #1
 800485e:	4013      	ands	r3, r2
 8004860:	d00b      	beq.n	800487a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a4a      	ldr	r2, [pc, #296]	; (8004994 <UART_AdvFeatureConfig+0x144>)
 800486a:	4013      	ands	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2202      	movs	r2, #2
 8004880:	4013      	ands	r3, r2
 8004882:	d00b      	beq.n	800489c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4a43      	ldr	r2, [pc, #268]	; (8004998 <UART_AdvFeatureConfig+0x148>)
 800488c:	4013      	ands	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2204      	movs	r2, #4
 80048a2:	4013      	ands	r3, r2
 80048a4:	d00b      	beq.n	80048be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a3b      	ldr	r2, [pc, #236]	; (800499c <UART_AdvFeatureConfig+0x14c>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	0019      	movs	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2208      	movs	r2, #8
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a34      	ldr	r2, [pc, #208]	; (80049a0 <UART_AdvFeatureConfig+0x150>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2210      	movs	r2, #16
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00b      	beq.n	8004902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <UART_AdvFeatureConfig+0x154>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	0019      	movs	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2220      	movs	r2, #32
 8004908:	4013      	ands	r3, r2
 800490a:	d00b      	beq.n	8004924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <UART_AdvFeatureConfig+0x158>)
 8004914:	4013      	ands	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2240      	movs	r2, #64	; 0x40
 800492a:	4013      	ands	r3, r2
 800492c:	d01d      	beq.n	800496a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <UART_AdvFeatureConfig+0x15c>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	035b      	lsls	r3, r3, #13
 800494e:	429a      	cmp	r2, r3
 8004950:	d10b      	bne.n	800496a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <UART_AdvFeatureConfig+0x160>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	4013      	ands	r3, r2
 8004972:	d00b      	beq.n	800498c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <UART_AdvFeatureConfig+0x164>)
 800497c:	4013      	ands	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}
 8004994:	fffdffff 	.word	0xfffdffff
 8004998:	fffeffff 	.word	0xfffeffff
 800499c:	fffbffff 	.word	0xfffbffff
 80049a0:	ffff7fff 	.word	0xffff7fff
 80049a4:	ffffefff 	.word	0xffffefff
 80049a8:	ffffdfff 	.word	0xffffdfff
 80049ac:	ffefffff 	.word	0xffefffff
 80049b0:	ff9fffff 	.word	0xff9fffff
 80049b4:	fff7ffff 	.word	0xfff7ffff

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b092      	sub	sp, #72	; 0x48
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2284      	movs	r2, #132	; 0x84
 80049c4:	2100      	movs	r1, #0
 80049c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fd f8c8 	bl	8001b5c <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2208      	movs	r2, #8
 80049d8:	4013      	ands	r3, r2
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d12c      	bne.n	8004a38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	0391      	lsls	r1, r2, #14
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4a46      	ldr	r2, [pc, #280]	; (8004b00 <UART_CheckIdleState+0x148>)
 80049e8:	9200      	str	r2, [sp, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f000 f88c 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 80049f0:	1e03      	subs	r3, r0, #0
 80049f2:	d021      	beq.n	8004a38 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f4:	f3ef 8310 	mrs	r3, PRIMASK
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fe:	2301      	movs	r3, #1
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	f383 8810 	msr	PRIMASK, r3
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	438a      	bics	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2278      	movs	r2, #120	; 0x78
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e05f      	b.n	8004af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d146      	bne.n	8004ad4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	03d1      	lsls	r1, r2, #15
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <UART_CheckIdleState+0x148>)
 8004a50:	9200      	str	r2, [sp, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f000 f858 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 8004a58:	1e03      	subs	r3, r0, #0
 8004a5a:	d03b      	beq.n	8004ad4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
 8004a66:	2301      	movs	r3, #1
 8004a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f383 8810 	msr	PRIMASK, r3
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4921      	ldr	r1, [pc, #132]	; (8004b04 <UART_CheckIdleState+0x14c>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
 8004a98:	2301      	movs	r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2278      	movs	r2, #120	; 0x78
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e011      	b.n	8004af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	2120      	movs	r1, #32
 8004ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2278      	movs	r2, #120	; 0x78
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b010      	add	sp, #64	; 0x40
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	01ffffff 	.word	0x01ffffff
 8004b04:	fffffedf 	.word	0xfffffedf

08004b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	e04b      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	d048      	beq.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b20:	f7fd f81c 	bl	8001b5c <HAL_GetTick>
 8004b24:	0002      	movs	r2, r0
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e04b      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d035      	beq.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d111      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f83c 	bl	8004bdc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2284      	movs	r2, #132	; 0x84
 8004b68:	2108      	movs	r1, #8
 8004b6a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2278      	movs	r2, #120	; 0x78
 8004b70:	2100      	movs	r1, #0
 8004b72:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e02c      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	401a      	ands	r2, r3
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d112      	bne.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 f81f 	bl	8004bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2284      	movs	r2, #132	; 0x84
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2278      	movs	r2, #120	; 0x78
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e00f      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	425a      	negs	r2, r3
 8004bc2:	4153      	adcs	r3, r2
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d0a4      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b004      	add	sp, #16
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08e      	sub	sp, #56	; 0x38
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	617b      	str	r3, [r7, #20]
  return(result);
 8004bea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4926      	ldr	r1, [pc, #152]	; (8004ca0 <UART_EndRxTransfer+0xc4>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c20:	2301      	movs	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d118      	bne.n	8004c82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c50:	f3ef 8310 	mrs	r3, PRIMASK
 8004c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f383 8810 	msr	PRIMASK, r3
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2110      	movs	r1, #16
 8004c72:	438a      	bics	r2, r1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2280      	movs	r2, #128	; 0x80
 8004c86:	2120      	movs	r1, #32
 8004c88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b00e      	add	sp, #56	; 0x38
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	fffffedf 	.word	0xfffffedf

08004ca4 <memset>:
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	1882      	adds	r2, r0, r2
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	7019      	strb	r1, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	4c0c      	ldr	r4, [pc, #48]	; (8004cec <__libc_init_array+0x38>)
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	f000 f819 	bl	8004cfc <_init>
 8004cca:	4c0a      	ldr	r4, [pc, #40]	; (8004cf4 <__libc_init_array+0x40>)
 8004ccc:	4d0a      	ldr	r5, [pc, #40]	; (8004cf8 <__libc_init_array+0x44>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	00b3      	lsls	r3, r6, #2
 8004cda:	58eb      	ldr	r3, [r5, r3]
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	00b3      	lsls	r3, r6, #2
 8004ce4:	58eb      	ldr	r3, [r5, r3]
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08004e08 	.word	0x08004e08
 8004cf0:	08004e08 	.word	0x08004e08
 8004cf4:	08004e0c 	.word	0x08004e0c
 8004cf8:	08004e08 	.word	0x08004e08

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
